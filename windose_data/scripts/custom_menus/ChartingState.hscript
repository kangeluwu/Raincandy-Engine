var noteTypeIntMap = new Map();
var noteTypeMap = new Map();
var undos = [];
	var redos = [];
	var songFileNames = ['Inst','Voices'];
	var eventStuff =
	[
		['', "Nothing. Yep, that's right."],
		['Dadbattle Spotlight', "Used in Dad Battle,\nValue 1: 0/1 = ON/OFF,\n2 = Target Dad\n3 = Target BF"],
		['Hey!', "Plays the \"Hey!\" animation from Bopeebo,\nValue 1: BF = Only Boyfriend, GF = Only Girlfriend,\nSomething else = Both.\nValue 2: Custom animation duration,\nleave it blank for 0.6s"],
		['Set GF Speed', "Sets GF head bopping speed,\nValue 1: 1 = Normal speed,\n2 = 1/2 speed, 4 = 1/4 speed etc.\nUsed on Fresh during the beatbox parts.\n\nWarning: Value must be integer!"],
		['Philly Glow', "Exclusive to Week 3\nValue 1: 0/1/2 = OFF/ON/Reset Gradient\n \nIF you want used to other stage,must set the glowbehind!(PlayState.instance.glowbehind = xxx)"],
		['Kill Henchmen', "For Mom's songs, don't use this please, i love them :("],
		['Add Camera Zoom', "Used on MILF on that one \"hard\" part\nValue 1: Camera zoom add (Default: 0.015)\nValue 2: UI zoom add (Default: 0.03)\nLeave the values blank if you want to use Default."],
		['Set Camera Zoom', "Set the Camera zooms.\nValue 1: zooms.\nValue 2: zoom times"],
		['BG Freaks Expression', "Should be used only in \"school\" Stage!"],
		['Trigger BG Ghouls', "Should be used only in \"schoolEvil\" Stage!"],
		['Play Animation', "Plays an animation on a Character,\nonce the animation is completed,\nthe animation changes to Idle\n\nValue 1: Animation to play.\nValue 2: Character (Dad, BF, GF)"],
		['Camera Follow Pos', "Value 1: X\nValue 2: Y\n\nThe camera won't change the follow point\nafter using this, for getting it back\nto normal, leave both values blank."],
		['Alt Idle Animation', "Sets a specified suffix after the idle animation name.\nYou can use this to trigger 'idle-alt' if you set\nValue 2 to -alt\n\nValue 1: Character to set (Dad, BF or GF)\nValue 2: New suffix (Leave it blank to disable)"],
		['Screen Shake', "Value 1: Camera shake\nValue 2: HUD shake\n\nEvery value works as the following example: \"1, 0.05\".\nThe first number (1) is the duration.\nThe second number (0.05) is the intensity."],
		['Change Character', "Value 1: Character to change (Dad, BF, GF)\nValue 2: New character's name\nValue 3: Destroy the previous character for higher performance.\n(If a previously destroyed character is reloaded, it will cause some lag)."],
		['Change Scroll Speed', "Value 1: Scroll Speed Multiplier (1 is default)\nValue 2: Time it takes to change fully in seconds."],
		['Set Property', "Value 1: Variable name\nValue 2: New value"],
		['Camera Flash', "hit with a flash on the camera, \nthe event only takes the base camera. \nValue 1: the Duration of the flash. \nValue 2: forced flash? \nValue 3: flash color (white default)."]
		//['Setting Crossfades', "Value 1: Crossfade Duration\nValue 2: Crossfade Intensity\nValue 3: Crossfade Blend\nLeave the values blank if you want to use Default."]
	];

	var UI_box;

    var playerVocalFiles = [];
	var opponentVocalFiles = [];
	var sfxFiles = [];
	var bpmTxt;

	var camPos;
	var strumLine = null;
	var quant = null;
	var strumLineNotes = null;
	var curSong = 'Test';
	var amountSteps = 0;
	var bullshitUI;

	var highlight;

        GRID_SIZE = 40;
	var CAM_OFFSET = 360;

	var dummyArrow;

	var curRenderedSustains;
	var curRenderedNotes;
	var curRenderedNoteType;

	var nextRenderedSustains;
	var nextRenderedNotes;

	var gridBG;
	var nextGridBG;

	var daquantspot = 0;
	var curEventSelected = 0;
	var curUndoIndex = 0;
	var curRedoIndex = 0;
	var _song;
	/*
	 * WILL BE THE CURRENT / LAST PLACED NOTE
	**/
	var curSelectedNote = null;
    var waveformSprite;
	var tempBpm = 0;

	var vocals = null;
	var sfx = null;
	var leftIcon;
	var rightIcon;
    var camIcon;
	var cam;
	var value1InputText;
	var value2InputText;
	var value3InputText;
	var currentSongName = '';

	var vocalFileName;
	var instrumentalFileName;
	var player2TextField;
	var player1TextField;
	var gfTextField;
	var cutsceneTextField;
	var uiTextField;

	var stageTextField;
	var composerTextField;

	var isAltNoteCheck;
    var isCrossfade;
	var playerText;
	var gfText;
	var enemyText;
	var stageText;
	var cutsceneText;
	var uiText;
	var composerText;
	var zoomTxt;

	var zoomList = [
		0.25,
		0.5,
		1,
		2,
		3,
		4,
		6,
		8,
		12,
		16,
		24
	];
	var curZoom = 2;
	var noteType = 0;
	var blockPressWhileTypingOn = [];
	var blockPressWhileTypingOnStepper = [];
    var blockPressWhileScrolling = [];

	var gridLayer;

quantization = 16;
curQuant = 3;

quantizations = [
		4,
		8,
		12,
		16,
		20,
		24,
		32,
		48,
		64,
		96,
		192
	];


    var curStrums = 2;
	var strums = [];
	var text = "";
	var bothyNote = [];
    vortex = false;
	var mouseQuant = false;
var instStuff = '';
var voicesStuff = '';
	lilStage;
	lilBf;
	lilOpp;
	function outdatedEventsTransToNewOnes(){
		var awa = new Map();
		for (daSection in 0..._song.notes.length)
				{
			for (i in _song.notes[daSection].sectionNotes)
			{
				if (i[1] == -1){
					if (!awa.exists(i[0]))
						awa.set(i[0],[]);
					var array = awa.get(i[0]);
					array.push([i[2],i[3],i[4]]);
					awa.set(i[0],array);
					_song.notes[daSection].sectionNotes.remove(i);
				}
			}	
				}
		for (time in awa.keys())
			_song.events.push([time,awa.get(time)]);
	}
	var notes = [];
    var theLastStep = 0;
	function create()
	{
        var sec =  ChartingState.lastSection;
     curSec =sec;
        trace(sec);
		if (Main.fpsVar.x != 10)
			Main.fpsVar.x = 10;
		if (PlayState.SONG != null)
			_song = PlayState.SONG;
		else
		{
			CoolUtil.difficulties = CoolUtil.defaultDifficulties.copy();

			_song = {
				song: 'Test',
				notes: [],
				events: [],
				songFileNames: ['Inst','Voices'],
				bpm: 150.0,
				needsVoices: true,
				needsSFX: true,
				playerVocalFiles: [],
				sfxFiles: [],
				opponentVocalFiles: [],
				igorAutoFix: true,
				arrowSkin: '',
				splashSkin: 'noteSplashes',//idk it would crash if i didn't
				player1: 'bf',
				player2: 'dad',
				gfVersion: 'gf',
				cutsceneType: "none",
				disPlayAutoMovingCam: false,
				uiType: 'normal',
				speed: 1,
				composer: '',
				songNameChinese: '测试',
				stage: 'stage',
				validScore: false,
				strums: 2
			};
			addSection(4);
			PlayState.SONG = _song;
		}
		playerVocalFiles = _song.playerVocalFiles;
		sfxFiles = _song.sfxFiles;
		opponentVocalFiles = _song.opponentVocalFiles;
        var sections = _song.notes;
		var fuckyou = [];
		for (i in sections)
            fuckyou.push(i.sectionNotes);

       
 
        
        var damn = fuckyou.length-1;
		while (damn > -1){
			var note= fuckyou[damn];
			var id = note.length-1;
            while (id > -1){
			notes.push(note[id]);
			id--;

			}
			fuckyou.remove(note);
			damn--;

		}
	
		curStrums = _song.strums;
		updateEventsForRealXDDD();
		// Paths.clearMemory();
		if (desktop && discord){
		// Updating Discord Rich Presence
		DiscordClient.changePresence("Chart Editor", StringTools.replace(_song.song, '-', ' '));
		}


		songFileNames = _song.songFileNames;
		vortex = FlixG.save.data.chart_vortex;
		ignoreWarnings = FlixG.save.data.ignoreWarnings;
		var bg = new FlxSprite().loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set();
		bg.color = 0xFF222222;
		add(bg);

		lilStage = new FlxSprite(32, 432).loadGraphic(Paths.image("chartEditor/lilStage"));
		lilStage.scrollFactor.set();
		add(lilStage);

		lilBf = new FlxSprite(32, 432).loadGraphic(Paths.image("chartEditor/lilBf"), true, 300, 256);
		lilBf.animation.add("idle", [0, 1], 12, true);
		lilBf.animation.add("0", [3, 4, 5], 12, false);
		lilBf.animation.add("1", [6, 7, 8], 12, false);
		lilBf.animation.add("2", [9, 10, 11], 12, false);
		lilBf.animation.add("3", [12, 13, 14], 12, false);
		lilBf.animation.play("idle");
		lilBf.animation.finishCallback = function(name){
			lilBf.animation.play(name, true, false, lilBf.animation.getByName(name).numFrames - 2);
		}
		lilBf.scrollFactor.set();
		add(lilBf);

		lilOpp = new FlxSprite(32, 432).loadGraphic(Paths.image("chartEditor/lilOpp"), true, 300, 256);
		lilOpp.animation.add("idle", [0, 1], 12, true);
		lilOpp.animation.add("0", [3, 4, 5], 12, false);
		lilOpp.animation.add("1", [6, 7, 8], 12, false);
		lilOpp.animation.add("2", [9, 10, 11], 12, false);
		lilOpp.animation.add("3", [12, 13, 14], 12, false);
		lilOpp.animation.play("idle");
		lilOpp.animation.finishCallback = function(name){
			lilOpp.animation.play(name, true, false, lilOpp.animation.getByName(name).numFrames - 2);
		}
		lilOpp.scrollFactor.set();
		add(lilOpp);
		gridLayer = new FlxTypedGroup();
		add(gridLayer);

		waveformSprite = new FlxSprite(-150, 0).makeGraphic(Std.int(GRID_SIZE * 8), 40*16, 0x00FFFFFF);
		add(waveformSprite);
		//waveformSprite.scrollFactor.set();
		var eventIcon = new FlxSprite(-GRID_SIZE - 5, -90).loadGraphic(Paths.image('eventArrow'));
		leftIcon = new HealthIcon('dad');
		rightIcon = new HealthIcon('bf');
		eventIcon.scrollFactor.set(1, 1);
		leftIcon.scrollFactor.set(1, 1);
		rightIcon.scrollFactor.set(1, 1);

		eventIcon.setGraphicSize(30, 30);
		leftIcon.setGraphicSize(0, 45);
		rightIcon.setGraphicSize(0, 45);

		add(eventIcon);
		add(leftIcon);
		add(rightIcon);

		leftIcon.setPosition(GRID_SIZE + 10, -100);
		rightIcon.setPosition(GRID_SIZE * 5.2, -100);

		curRenderedSustains = new FlxTypedGroup();
		curRenderedNotes = new FlxTypedGroup();
		curRenderedNoteType = new FlxTypedGroup();

		nextRenderedSustains = new FlxTypedGroup();
		nextRenderedNotes = new FlxTypedGroup();

		if(curSec >= _song.notes.length) curSec = _song.notes.length - 1;

		FlixG.mouse.visible = true;
		//FlixG.save.bind('funkin', 'ninjamuffin99');

		tempBpm = _song.bpm;

		addSection(4);

		// sections = _song.notes;

		currentSongName = Paths.formatToSongPath(_song.song);
		loadSong();
		reloadGridLayer();
		Conductor.changeBPM(_song.bpm);
		Conductor.mapBPMChanges(_song);

		bpmTxt = new FlxText(1000, 50, 0, "", 16);
		bpmTxt.scrollFactor.set();
		add(bpmTxt);

	
	

		strumLineNotes = new FlxTypedGroup();
		for (i in 0...curStrums){
			createStrumNotes(i);
		}
		add(strumLineNotes);

		camPos = new FlxObject(0, 0, 1, 1);
		camPos.setPosition(strumLine.x + CAM_OFFSET, strumLine.y);

		dummyArrow = new FlxSprite().makeGraphic(GRID_SIZE, GRID_SIZE);
		add(dummyArrow);

		var tabs = [
			{name: "Song", label: 'Song'},
			{name: "Section", label: 'Section'},
			{name: "Note", label: 'Note'},
			{name: "Events", label: 'Events'},
			{name: "Charting", label: 'Charting'},
			{name: "Char", label: 'Char'}
		];

		UI_box = new FlxUITabMenu(null, null, tabs, null, true, null, null);

		UI_box.resize(300, 400);
		UI_box.x = 640 + GRID_SIZE / 2;
		UI_box.y = 25;
		UI_box.scrollFactor.set();
		UI_box.zIndex = 114514;
if (!mobile){
		text =
		"W/S or Mouse Wheel - Change Conductor's strum time
		\nA/D - Go to the previous/next section
		\nLeft/Right - Change Snap
		\nUp/Down - Change Conductor's Strum Time with Snapping
		\nHold Shift to move 4x faster
		\nHold Control and click on an arrow to select it
		\nZ/X - Zoom in/out
		\n
		\nEsc - Test your chart inside Chart Editor
		\nEnter - Play your chart
		\nQ/E - Decrease/Increase Note Sustain Length
		\nSpace - Stop/Resume song";
}else{
text ="
Left/Right - Go to the previous/next section
\nUp/Down - Change Conductor's Strum Time with Snapping
\nHold Y to move 4x faster
\nHold D and click on an arrow to select it
\n
\nEsc - Test your chart inside Chart Editor
\nA - Play your chart
\nQ/E - Decrease/Increase Note Sustain Length
\nX - Stop/Resume song";
}
		var tipTextArray = text.split('\n');
		for (i in 0...tipTextArray.length) {
			var tipText = new FlxText(UI_box.x, UI_box.y + UI_box.height + 8, 0, tipTextArray[i], 16);
			tipText.y += i * 12;
			tipText.setFormat(Paths.font("vcr.ttf"), 14, 0xFFffffff, 'left'/*, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK*/);
			//tipText.borderSize = 2;
			tipText.scrollFactor.set();
			add(tipText);
			tipText.zIndex = 114514;
		}
		cam = new FlxText(10, 25, 0, "camera pos:", 16);
		cam.scrollFactor.set();
	
		cam.zIndex = 114514;
		add(UI_box);
		add(cam);

		camIcon = new HealthIcon('dad');
		camIcon.scrollFactor.set();
	
		add(camIcon);
		camIcon.setGraphicSize(0, 45);
		camIcon.setPosition(cam.x + 80, cam.y-60);
		camIcon.zIndex = 114514;
		addSongUI();

		addSectionUI();

		addNoteUI();

		addEventsUI();

		addChartingUI();

		addCharsUI();

		updateHeads();
		updateWaveform();
		//UI_box.selected_tab = 4;

		add(curRenderedSustains);
   
		add(curRenderedNotes);
		add(curRenderedNoteType);
		add(nextRenderedSustains);
		add(nextRenderedNotes);

		if(ChartingState.lastSong != currentSongName) {
			curSec = 0;
		}            
        ChartingState.lastSong = currentSongName;
        changeSection(curSec, true);
		

		zoomTxt = new FlxText(10, 10, 0, "Zoom: 1 / 1", 16);
		zoomTxt.scrollFactor.set();
		zoomTxt.zIndex = 114514;
		add(zoomTxt);
       
		updateGrid();
		if (mobile)
        addVirtualPads('full', 'full');
    


	}
    function updateEventsForRealXDDD(){
		for (daSection in 0..._song.notes.length)
			{
				for (i in _song.notes[daSection].sectionNotes){
					if (i[1] < 0){
						_song.events.push([i[0],[[i[2],i[3],i[4],i[5]]]]);
						_song.notes[daSection].sectionNotes.remove(i);
					}
				}
			}
	}
	var check_mute_inst = null;
	var check_vortex = null;
	var check_warnings = null;
	var playSoundBf = null;
	var playSoundDad = null;
	var playSoundExtra = null;
	var UI_songTitle;
	var noteSkinInputText;
	var noteSplashesInputText;
	var stageDropDown;

	var noteTypeInput;
	var noteTypeChangeput;
	function addSongUI()
	{
		UI_songTitle = new FlxUIInputText(10, 10, 70, _song.song, 8);
		blockPressWhileTypingOn.push(UI_songTitle);

		var check_voices = new FlxUICheckBox(10, 25, null, null, "Has voice track", 100);
		check_voices.checked = _song.needsVoices;
		// _song.needsVoices = check_voices.checked;
		check_voices.callback = function()
		{
			_song.needsVoices = check_voices.checked;
			trace('CHECKED!');
		};

		
		var saveButton = new FlxButton(110, 8, "Save", function()
		{
			saveLevel();
		});

		var reloadSong = new FlxButton(saveButton.x + 90, saveButton.y, "Reload Audio", function()
		{
			currentSongName = Paths.formatToSongPath(UI_songTitle.text);
			loadSong();
			updateWaveform();
		});

		var reloadSongJson = new FlxButton(reloadSong.x, saveButton.y + 30, "Reload JSON", function()
		{
			FlxG.sound.play(Paths.sound('confirmPoko'));
			openSubState(new Prompt('This action will clear current progress.\n\nProceed?', 0, function(){loadJson(_song.song.toLowerCase()); }, null,ignoreWarnings));
		});

		var loadAutosaveBtn = new FlxButton(reloadSongJson.x, reloadSongJson.y + 30, 'Load Autosave', function()
		{
			PlayState.SONG = Song.parseJSONshit(FlixG.save.data.autosave);
			MusicBeatState.resetState();
		});

		var loadEventJson = new FlxButton(loadAutosaveBtn.x, loadAutosaveBtn.y + 30, 'Load Events', function()
		{

			var songName = Paths.formatToSongPath(_song.song);
			var file = Paths.json(songName + '/events');
			if (sysTarget){
            var bool = (modsAllow && FileSystem.exists(Paths.modsJson(songName + '/events')));
			if ( FileSystem.exists(SUtil.getPath() + file))

                    {
                        clearEvents();
                        var events = Song.loadFromJson('events', songName);
                        _song.events = events.events;
                        changeSection(curSec);
                    }
                }else{
            if (OpenFlAssets.exists(file))

                {
                    clearEvents();
                    var events = Song.loadFromJson('events', songName);
                    _song.events = events.events;
                    changeSection(curSec);
                }
              }
			
		});

		var saveEvents = new FlxButton(110, reloadSongJson.y, 'Save Events', function ()
		{
			saveEvents();
		});
		var check_autoFix = new FlxUICheckBox(100, saveEvents.y + 40, null, null, "Use Autofix Charting(DO NOT PRESS THIS IF YOU DON'T WHAT IT IS)", 80);
		check_autoFix.checked = _song.igorAutoFix;
		// _song.needsVoices = check_voices.checked;
		check_autoFix.callback = function()
		{
			_song.igorAutoFix = check_autoFix.checked;
			updateHeads();
			//trace('CHECKED!');
		};

		var clear_events = new FlxButton(320, 310, 'Clear events', function()
			{
				FlxG.sound.play(Paths.sound('confirmPoko'));
				openSubState(new Prompt('This action will clear current progress.\n\nProceed?', 0, clearEvents, null,ignoreWarnings));
			});
		clear_events.color = FlxColor.RED;
		clear_events.label.color = FlxColor.WHITE;

		var clear_notes = new FlxButton(320, clear_events.y + 30, 'Clear notes', function()
			{
				FlxG.sound.play(Paths.sound('confirmPoko'));
				openSubState(new Prompt('This action will clear current progress.\n\nProceed?', 0, function(){
					for (sec in 0..._song.notes.length) {
					_song.notes[sec].sectionNotes = [];
				}
				notes = [];
				updateGrid();
			}, null,ignoreWarnings));

			});
		clear_notes.color = FlxColor.RED;
		clear_notes.label.color = FlxColor.WHITE;

		var stepperBPM = new FlxUINumericStepper(10, 70, 1, 1, 1, 400, 3);
		stepperBPM.value = Conductor.bpm;
		stepperBPM.name = 'song_bpm';
		blockPressWhileTypingOnStepper.push(stepperBPM);

		
		var stepperSpeed = new FlxUINumericStepper(10, stepperBPM.y + 35, 0.1, 1, 0.1, 10, 1);
		stepperSpeed.value = _song.speed;
		stepperSpeed.name = 'song_speed';
		blockPressWhileTypingOnStepper.push(stepperSpeed);


		noteTypeInput = new FlxUIInputText(10, stepperSpeed.y + 35, 150, '', 8);
		blockPressWhileTypingOn.push(noteTypeInput);

		noteTypeChangeput = new FlxUIInputText(noteTypeInput.x, noteTypeInput.y + 35, 150, '', 8);
		blockPressWhileTypingOn.push(noteTypeChangeput);

		var changeNoteTypeButton = new FlxButton(noteTypeChangeput.x, noteTypeChangeput.y + 20, 'Change Note Types', function()
			{
				FlxG.sound.play(Paths.sound('confirmPoko'));
				openSubState(new Prompt('This action will clear current some progress.\n\nProceed?', 0, function(){changeNoteType(noteTypeInput.text,noteTypeChangeput.text);

			}, null,ignoreWarnings));

			});
			changeNoteTypeButton.setGraphicSize(80, 30);
			changeNoteTypeButton.updateHitbox();

		var skin = PlayState.SONG.arrowSkin;
		if(skin == null) skin = '';
		noteSkinInputText = new FlxUIInputText(10, stepperSpeed.y + 45 + 40 + 50, 150, skin, 8);
		blockPressWhileTypingOn.push(noteSkinInputText);

		noteSplashesInputText = new FlxUIInputText(noteSkinInputText.x, noteSkinInputText.y + 35, 150, _song.splashSkin, 8);
		blockPressWhileTypingOn.push(noteSplashesInputText);

		var reloadNotesButton = new FlxButton(noteSplashesInputText.x + 5, noteSplashesInputText.y + 20, 'Change Notes', function() {
			_song.arrowSkin = noteSkinInputText.text;
			updateGrid();
		});

		var check_sfx = new FlxUICheckBox(10, reloadNotesButton.y + 35, null, null, "Has sfx track", 100);
		check_sfx.checked = _song.needsSFX;
		// _song.needsVoices = check_voices.checked;
		check_sfx.callback = function()
		{
			_song.needsSFX = check_sfx.checked;
			//trace('CHECKED!');
		};

		var tab_group_song = new FlxUI(null, UI_box);
		tab_group_song.name = "Song";
		tab_group_song.add(UI_songTitle);
		tab_group_song.add(check_sfx);
		tab_group_song.add(check_voices);
		tab_group_song.add(clear_events);
		tab_group_song.add(clear_notes);
		tab_group_song.add(saveButton);
		tab_group_song.add(saveEvents);
		tab_group_song.add(reloadSong);
		tab_group_song.add(reloadSongJson);
		tab_group_song.add(loadAutosaveBtn);
		tab_group_song.add(loadEventJson);
		tab_group_song.add(stepperBPM);
		tab_group_song.add(stepperSpeed);
		tab_group_song.add(reloadNotesButton);
		tab_group_song.add(noteSkinInputText);
		tab_group_song.add(noteSplashesInputText);
		tab_group_song.add(changeNoteTypeButton);
		tab_group_song.add(noteTypeInput);
		tab_group_song.add(check_autoFix);
		tab_group_song.add(noteTypeChangeput);
		tab_group_song.add(new FlxText(stepperBPM.x, stepperBPM.y - 15, 0, 'Song BPM:'));
		tab_group_song.add(new FlxText(stepperSpeed.x, stepperSpeed.y - 15, 0, 'Song Speed:'));
		tab_group_song.add(new FlxText(noteTypeInput.x, noteTypeInput.y - 15, 0, 'The Note Type to change:'));
		tab_group_song.add(new FlxText(noteTypeChangeput.x, noteTypeChangeput.y - 15, 0, 'The Note Type Want to change:'));
		tab_group_song.add(new FlxText(noteSkinInputText.x, noteSkinInputText.y - 15, 0, 'Note Texture:'));
		tab_group_song.add(new FlxText(noteSplashesInputText.x, noteSplashesInputText.y - 15, 0, 'Note Splashes Texture:'));
	

	
		UI_box.addGroup(tab_group_song);

		FlxG.camera.follow(camPos);
	}
	var stepperStrums;
	var playerInputText;
	var oppoInputText;
	var sfxInputText;
    var curPVSelected = 0;
	var curOVSelected = 0;
	var curSFXSelected = 0;
	function addCharsUI()
		{
			var tab_group_char = new FlxUI(null, UI_box);
			tab_group_char.name = "Char";
			player1TextField = new FlxUIInputText(10, 40, 70, _song.player1, 8);
			player1TextField.callback = function(text,bf){
				_song.player1 = text;
				updateHeads();
			};
			player2TextField = new FlxUIInputText(120, player1TextField.y, 70, _song.player2, 8);
			player2TextField.callback = function(text,dad){
				_song.player2 = text;
				updateHeads();
			};



			gfTextField = new FlxUIInputText(10, player2TextField.y +20, 70, _song.gfVersion, 8);
			gfTextField.callback = function(text,gf){
				_song.gfVersion = text;
				if (_song.notes[curSec].gfSection)
				updateHeads();
			};
			stageTextField = new FlxUIInputText(120, player2TextField.y +20, 70, _song.stage, 8);
			cutsceneTextField = new FlxUIInputText(120, stageTextField.y +20, 70, _song.cutsceneType, 8);
			uiTextField = new FlxUIInputText(10, stageTextField.y +20, 70, _song.uiType, 8);
			composerTextField = new FlxUIInputText(10, cutsceneTextField.y +20, 70, _song.composer, 8);

			instrumentalFileName = new FlxUIInputText(10, composerTextField.y +20, 70, _song.songFileNames[0], 8);
			instrumentalFileName.callback = function(text,as){
				_song.songFileNames[0] = text;
				loadSong();
			}
			vocalFileName = new FlxUIInputText(10,  instrumentalFileName.y +20, 70, _song.songFileNames[1], 8);
			vocalFileName.callback = function(text,as){
				_song.songFileNames[1] = text;
				loadSong();
			}

	var t = "";
	if (playerVocalFiles.length > 0)
		t = playerVocalFiles[0];
		playerInputText = new FlxUIInputText(10, vocalFileName.y +20, 100, t);
		blockPressWhileTypingOn.push(playerInputText);

	    createButtons(tab_group_char,playerInputText
			,function(){
				if (playerVocalFiles.length > 0)
					playerVocalFiles.remove(playerVocalFiles[curPVSelected]);
				--curPVSelected;
				if(curPVSelected < 0) curPVSelected = 0;
				if (playerVocalFiles.length > 0)
				playerInputText.text = playerVocalFiles[0];
				else
				playerInputText.text = '';
				_song.playerVocalFiles = playerVocalFiles;
				loadSong();
		},function(){
			curPVSelected++;
			playerVocalFiles.push(playerInputText.text);
			_song.playerVocalFiles = playerVocalFiles;
			loadSong();
		},function(){
			if (playerVocalFiles.length > 0){
				curPVSelected += -1;
				if(curPVSelected < 0) curPVSelected = Std.int(playerVocalFiles.length) - 1;
				else if(curPVSelected >= playerVocalFiles.length) curPVSelected = 0;
				playerInputText.text = playerVocalFiles[curPVSelected];
				}
		},function(){
			if (playerVocalFiles.length > 0){
				curPVSelected += 1;
				if(curPVSelected < 0) curPVSelected = Std.int(playerVocalFiles.length) - 1;
				else if(curPVSelected >= playerVocalFiles.length) curPVSelected = 0;
				playerInputText.text = playerVocalFiles[curPVSelected];
				}
		});
		var t = "";
		if (opponentVocalFiles.length > 0)
			t = opponentVocalFiles[0];
		oppoInputText = new FlxUIInputText(10, playerInputText.y +20, 100, t);
		blockPressWhileTypingOn.push(oppoInputText);

	    createButtons(tab_group_char,oppoInputText
			,function(){
				if (opponentVocalFiles.length > 0)
					opponentVocalFiles.remove(opponentVocalFiles[curOVSelected]);
				--curOVSelected;
				if(curOVSelected < 0) curOVSelected = 0;
				if (opponentVocalFiles.length > 0)
					oppoInputText.text = opponentVocalFiles[0];
				else
					oppoInputText.text = '';
				_song.opponentVocalFiles = opponentVocalFiles;
				loadSong();
		},function(){
			curOVSelected++;
			opponentVocalFiles.push(oppoInputText.text);
			_song.opponentVocalFiles = opponentVocalFiles;
			loadSong();
		},function(){
			if (opponentVocalFiles.length > 0){
				curOVSelected += -1;
				if(curOVSelected < 0) curOVSelected = Std.int(opponentVocalFiles.length) - 1;
				else if(curOVSelected >= opponentVocalFiles.length) curOVSelected = 0;
				oppoInputText.text = opponentVocalFiles[curOVSelected];
				}
		},function(){
			if (opponentVocalFiles.length > 0){
				curOVSelected += 1;
				if(curOVSelected < 0) curOVSelected = Std.int(opponentVocalFiles.length) - 1;
				else if(curOVSelected >= opponentVocalFiles.length) curOVSelected = 0;
				oppoInputText.text = opponentVocalFiles[curOVSelected];
				}
		});
		var t = "";
		if (sfxFiles.length > 0)
			t = sfxFiles[0];
		sfxInputText = new FlxUIInputText(10, oppoInputText.y +20, 100, t);
		blockPressWhileTypingOn.push(sfxInputText);

	    createButtons(tab_group_char,sfxInputText
			,function(){
				if (sfxFiles.length > 0)
					sfxFiles.remove(sfxFiles[curSFXSelected]);
				--curSFXSelected;
				if(curSFXSelected < 0) curSFXSelected = 0;
				if (sfxFiles.length > 0)
					sfxInputText.text = sfxFiles[0];
				else
					sfxInputText.text = '';
				_song.sfxFiles = sfxFiles;
				loadSong();
		},function(){
			curSFXSelected++;
			sfxFiles.push(sfxInputText.text);
			_song.sfxFiles = sfxFiles;
			loadSong();
		},function(){
			if (sfxFiles.length > 0){
				curSFXSelected += -1;
				if(curSFXSelected < 0) curSFXSelected = Std.int(sfxFiles.length) - 1;
				else if(curSFXSelected >= sfxFiles.length) curSFXSelected = 0;
				sfxInputText.text = sfxFiles[curSFXSelected];
				}
		},function(){
			if (sfxFiles.length > 0){
				curSFXSelected += 1;
				if(curSFXSelected < 0) curSFXSelected = Std.int(sfxFiles.length) - 1;
				else if(curSFXSelected >= sfxFiles.length) curSFXSelected = 0;
				sfxInputText.text = sfxFiles[curSFXSelected];
				}
		});

		stepperStrums = new FlxUINumericStepper(10, sfxInputText.y + 20, 1, curStrums, 2, 10, 1);
		stepperStrums.name = 'strum_nums';
		stepperStrums.value = curStrums;

		
			playerText = new FlxText(player1TextField.x + 70, player1TextField.y, 0, ":bf", 8, false);
			enemyText = new FlxText(player2TextField.x + 70, player2TextField.y, 0, ":opponent", 8, false);
			gfText = new FlxText(gfTextField.x + 70, gfTextField.y, 0, ":gf", 8, false);
			stageText = new FlxText(stageTextField.x + 70, stageTextField.y, 0, ":stage", 8, false);
			cutsceneText = new FlxText(cutsceneTextField.x + 70, uiTextField.y, 0, ":cutscene", 8, false);
			uiText = new FlxText(uiTextField.x + 70, uiTextField.y, 0, ":UI", 8, false);
			composerText = new FlxText(composerTextField.x + 70, composerTextField.y, 0, ":composer", 8, false);

			var instrumentalText = new FlxText(uiTextField.x + 70, instrumentalFileName.y, 0, ":Instrumental", 8, false);
			var vocalText = new FlxText(composerTextField.x + 70, vocalFileName.y, 0, ":Voices", 8, false);

			var strumT = new FlxText(stepperStrums.x + 70, stepperStrums.y, 0, ":Strums", 8, false);

			
			blockPressWhileTypingOn.push(player1TextField);
			blockPressWhileTypingOn.push(player2TextField);
			blockPressWhileTypingOn.push(gfTextField);
			blockPressWhileTypingOn.push(stageTextField);
			blockPressWhileTypingOn.push(cutsceneTextField);
			blockPressWhileTypingOn.push(uiTextField);
			blockPressWhileTypingOn.push(composerTextField);
			blockPressWhileTypingOn.push(instrumentalFileName);
			blockPressWhileTypingOn.push(vocalFileName);
			blockPressWhileTypingOnStepper.push(stepperStrums);

			tab_group_char.add(playerInputText);
			tab_group_char.add(oppoInputText);
			tab_group_char.add(sfxInputText);
			tab_group_char.add(stageTextField);
			tab_group_char.add(gfTextField);
			tab_group_char.add(player1TextField);
			tab_group_char.add(player2TextField);
			tab_group_char.add(cutsceneTextField);
			tab_group_char.add(uiTextField);
			tab_group_char.add(composerTextField);
			tab_group_char.add(instrumentalFileName);
			tab_group_char.add(vocalFileName);
			tab_group_char.add(stepperStrums);
			tab_group_char.add(playerText);
			tab_group_char.add(enemyText);
			tab_group_char.add(gfText);
			tab_group_char.add(stageText);
			tab_group_char.add(cutsceneText);
			tab_group_char.add(uiText);
			tab_group_char.add(composerText);
			tab_group_char.add(instrumentalText);
			tab_group_char.add(vocalText);
			tab_group_char.add(strumT);
			UI_box.addGroup(tab_group_char);

		}
		
	var stepperBeats;
	var check_mustHitSection;
	var check_gfSection;
	var check_changeBPM;
	var check_crossfadeBf;
    var check_crossfadeDad;

	var stepperSectionBPM;
	//var check_altAnim:FlxUICheckBox;
	var stepperAltAnim;

	var sectionToCopy = 0;
	var notesCopied = [];
    function createButtons(tab,
		obj,
		re
		,adds
		,moveLeft
		,moveRight){
		var removeButtonP = new FlxButton(obj.x + obj.width + 10, obj.y, '-', function()
			{
			if (re != null)
				re();
			});
			removeButtonP.setGraphicSize(Std.int(removeButtonP.height), Std.int(removeButtonP.height));
			removeButtonP.updateHitbox();
			removeButtonP.color = FlxColor.RED;
			removeButtonP.label.color = FlxColor.WHITE;
			removeButtonP.label.size = 12;
			setAllLabelsOffset(removeButtonP, -30, 0);
			tab.add(removeButtonP);
	
			var addButtonP = new FlxButton(removeButtonP.x + removeButtonP.width + 10, removeButtonP.y, '+', function()
			{
				if (adds != null)
					adds();
			});
			addButtonP.setGraphicSize(Std.int(removeButtonP.width), Std.int(removeButtonP.height));
			addButtonP.updateHitbox();
			addButtonP.color = FlxColor.GREEN;
			addButtonP.label.color = FlxColor.WHITE;
			addButtonP.label.size = 12;
			setAllLabelsOffset(addButtonP, -30, 0);
			tab.add(addButtonP);
	
			
			var moveLeftButtonP = new FlxButton(addButtonP.x + addButtonP.width + 20, addButtonP.y, '<', function()
			{
				if (moveLeft != null)
					moveLeft();
			});
			moveLeftButtonP.setGraphicSize(Std.int(addButtonP.width), Std.int(addButtonP.height));
			moveLeftButtonP.updateHitbox();
			moveLeftButtonP.label.size = 12;
			setAllLabelsOffset(moveLeftButtonP, -30, 0);
			tab.add(moveLeftButtonP);
	
			var moveRightButtonP = new FlxButton(moveLeftButtonP.x + moveLeftButtonP.width + 10, moveLeftButtonP.y, '>', function()
			{
				if (moveRight != null)
					moveRight();
			});
			moveRightButtonP.setGraphicSize(Std.int(moveLeftButtonP.width), Std.int(moveLeftButtonP.height));
			moveRightButtonP.updateHitbox();
			moveRightButtonP.label.size = 12;
			setAllLabelsOffset(moveRightButtonP, -30, 0);
			tab.add(moveRightButtonP);
	}
    function stepHit(step){

    }
    function beatHit(step){

    }
	function addSectionUI()
	{
		var tab_group_section = new FlxUI(null, UI_box);
		tab_group_section.name = 'Section';

		check_mustHitSection = new FlxUICheckBox(10, 15, null, null, "Must hit section", 100);
		check_mustHitSection.name = 'check_mustHit';
		check_mustHitSection.checked = _song.notes[curSec].mustHitSection;

		check_gfSection = new FlxUICheckBox(10, check_mustHitSection.y + 22, null, null, "GF section", 100);
		check_gfSection.name = 'check_gf';
		check_gfSection.checked = _song.notes[curSec].gfSection;
		// _song.needsVoices = check_mustHit.checked;

		//check_altAnim = new FlxUICheckBox(check_gfSection.x + 120, check_gfSection.y, null, null, "Alt Animation", 100);
		//check_altAnim.checked = _song.notes[curSec].altAnim;



		stepperBeats = new FlxUINumericStepper(10, 100, 1, 4, 1, 8, 2);
		stepperBeats.value = getSectionBeats(null);
		stepperBeats.name = 'section_beats';
		blockPressWhileTypingOnStepper.push(stepperBeats);
		//check_altAnim.name = 'check_altAnim';

		check_changeBPM = new FlxUICheckBox(10, stepperBeats.y + 30, null, null, 'Change BPM', 100);
		check_changeBPM.checked = _song.notes[curSec].changeBPM;
		check_changeBPM.name = 'check_changeBPM';

		stepperSectionBPM = new FlxUINumericStepper(10, check_changeBPM.y + 20, 1, Conductor.bpm, 0, 999, 1);
		if(check_changeBPM.checked) {
			stepperSectionBPM.value = _song.notes[curSec].bpm;
		} else {
			stepperSectionBPM.value = Conductor.bpm;
		}
		stepperSectionBPM.name = 'section_bpm';
		blockPressWhileTypingOnStepper.push(stepperSectionBPM);

		var check_eventsSec = null;
		var check_notesSec = null;
		var copyButton = new FlxButton(10, 170, "Copy Section", function()
		{
			notesCopied = [];
			sectionToCopy = curSec;
			

			var startThing = sectionStartTime(0);
			var endThing = sectionStartTime(1);
			for (event in _song.events)
			{
				var strumTime = event[0];
				if(endThing > event[0] && event[0] >= startThing)
				{
					var copiedEventArray= [];
					for (i in 0...event[1].length)
					{
						var eventToPush= event[1][i];
						copiedEventArray.push([eventToPush[0], eventToPush[1], eventToPush[2]]);
					}
					notesCopied.push([strumTime, -1, copiedEventArray]);
				}
			}
			for (note in notes)
				{
					var strumTime = note[0];
					if(endThing > note[0] && note[0] >= startThing)
					{
						var copiedNote = [note[0], note[1], note[2], note[3]];
						
						notesCopied.push(copiedNote);
					}
				}
		});

		var pasteButton = new FlxButton(copyButton.x + 100, copyButton.y, "Paste Section", function()
		{
			if(notesCopied == null || notesCopied.length < 1)
			{
				return;
			}

			var addToTime = Conductor.stepCrochet * (getSectionBeats(null) * 4 * (curSec - sectionToCopy));
			//trace('Time to add: ' + addToTime);

			for (note in notesCopied)
			{
				var copiedNote = [];
				var newStrumTime = note[0] + addToTime;
				if(note[1] < 0)
				{
					if(check_eventsSec.checked)
					{
						var copiedEventArray= [];
						for (i in 0...note[2].length)
						{
							var eventToPush = note[2][i];
							copiedEventArray.push([eventToPush[0], eventToPush[1], eventToPush[2]]);
						}
						_song.events.push([newStrumTime, copiedEventArray]);
					}
				}
				else
				{
					if(check_notesSec.checked)
					{
						if(note[4] != null) {
							copiedNote = [newStrumTime, note[1], note[2], note[3], note[4]];
						} else {
							copiedNote = [newStrumTime, note[1], note[2], note[3]];
						}
						_song.notes[curSec].sectionNotes.push(copiedNote);
						notes.push(copiedNote);
					}
				}
			}
			updateGrid();
		});

		var clearSectionButton = new FlxButton(pasteButton.x + 100, pasteButton.y, "Clear", function()
		{

			if(check_notesSec.checked)
			{
				var i = notes.length - 1;
				var startThing = sectionStartTime(0);
				var endThing = sectionStartTime(1);
				while(i > -1) {
					var note= notes[i];
					if(note != null && endThing > note[0] && note[0] >= startThing)
					{
						for (sec in _song.notes){
							if(sec.sectionNotes.contains(note))
							sec.sectionNotes.remove(note);
						}
						notes.remove(note);
					}
					--i;
				}
			}

			if(check_eventsSec.checked)
			{
				var i = _song.events.length - 1;
				var startThing = sectionStartTime(0);
				var endThing = sectionStartTime(1);
				while(i > -1) {
					var event= _song.events[i];
					if(event != null && endThing > event[0] && event[0] >= startThing)
					{
						_song.events.remove(event);
					}
					--i;
				}
			}
			updateGrid();
			updateNoteUI();
		});
		clearSectionButton.color = FlxColor.RED;
		clearSectionButton.label.color = FlxColor.WHITE;
		
		check_notesSec = new FlxUICheckBox(10, clearSectionButton.y + 25, null, null, "Notes", 100);
		check_notesSec.checked = true;
		check_eventsSec = new FlxUICheckBox(check_notesSec.x + 100, check_notesSec.y, null, null, "Events", 100);
		check_eventsSec.checked = true;

		var swapSection = new FlxButton(10, check_notesSec.y + 40, "Swap section", function()
		{
			for (i in 0..._song.notes[curSec].sectionNotes.length)
			{
				for (note in _song.notes[curSec].sectionNotes)
					notes.remove(note);

				var note = _song.notes[curSec].sectionNotes[i];
				if (Math.floor(note[1] / 4) < 2)
				note[1] = (note[1] + 4) % 8;
				_song.notes[curSec].sectionNotes[i] = note;
				for (note in _song.notes[curSec].sectionNotes)
				notes.push(note);
			}
			updateGrid();
		});

		var stepperCopy = null;
		var copyLastButton = new FlxButton(10, swapSection.y + 30, "Copy last section", function()
		{
			var value = Std.int(stepperCopy.value);
			if(value == 0) return;

			var daSec = FlxMath.maxInt(curSec, value);


			var startThing = sectionStartTime(-value);
			var endThing = sectionStartTime(-value + 1);

			for (note in notes)
				{
					var strumTime = note[0];
					if(endThing > note[0] && note[0] >= startThing)
					{
						strumTime += Conductor.stepCrochet * 4 * 4 * value;
						var copiedNote = [strumTime, note[1], note[2], note[3]];
						_song.notes[daSec].sectionNotes.push(copiedNote);
						notes.push(copiedNote);
					}
				}

			for (event in _song.events)
			{
				var strumTime = event[0];
				if(endThing > event[0] && event[0] >= startThing)
				{
					strumTime += Conductor.stepCrochet * (getSectionBeats(daSec) * 4 * value);
					var copiedEventArray= [];
					for (i in 0...event[1].length)
					{
						var eventToPush = event[1][i];
						copiedEventArray.push([eventToPush[0], eventToPush[1], eventToPush[2]]);
					}
					_song.events.push([strumTime, copiedEventArray]);
				}
			}
			updateGrid();
		});
		copyLastButton.setGraphicSize(80, 30);
		copyLastButton.updateHitbox();
		
		stepperCopy = new FlxUINumericStepper(copyLastButton.x + 100, copyLastButton.y, 1, 1, -999, 999, 0);
		blockPressWhileTypingOnStepper.push(stepperCopy);

		var duetButton = new FlxButton(10, copyLastButton.y + 45, "Duet Notes", function()
		{
			var duetNotes = [];
			for (note in _song.notes[curSec].sectionNotes)
			{
				
				var boob = note[1];
				if (Math.floor(note[1] / 4) < 2){
				if (boob>3){
					boob -= 4;
				}else{
					boob += 4;
				}
			}
				var copiedNote = [note[0], boob, note[2], note[3]];
				duetNotes.push(copiedNote);
			}

			for (i in duetNotes){
			_song.notes[curSec].sectionNotes.push(i);
			notes.push(i);
			}

			updateGrid();
		});
		var mirrorButton = new FlxButton(duetButton.x + 100, duetButton.y, "Mirror Notes", function()
		{
			var duetNotes = [];
			for (note in _song.notes[curSec].sectionNotes)
			{
				var boob = note[1]%4;
				boob = 3 - boob;
				var strum = Math.floor(note[1] / 4);
				switch (strum){
					case 0:
						strum =1;
						case 1:
							strum =0;
				}
				boob += 4*strum;
				note[1] = boob;
				var copiedNote = [note[0], boob, note[2], note[3]];
				//duetNotes.push(copiedNote);
			}

			for (i in duetNotes){
			//_song.notes[curSec].sectionNotes.push(i);

			}

			updateGrid();
		});

		tab_group_section.add(new FlxText(stepperBeats.x, stepperBeats.y - 15, 0, 'Beats per Section:'));
		tab_group_section.add(stepperBeats);
		tab_group_section.add(stepperSectionBPM);
		tab_group_section.add(check_mustHitSection);
		tab_group_section.add(check_gfSection);
		//tab_group_section.add(check_altAnim);
		tab_group_section.add(check_changeBPM);
		tab_group_section.add(copyButton);
		tab_group_section.add(pasteButton);
		tab_group_section.add(clearSectionButton);
		tab_group_section.add(check_notesSec);
		tab_group_section.add(check_eventsSec);
		tab_group_section.add(swapSection);
		tab_group_section.add(stepperCopy);
		tab_group_section.add(copyLastButton);
		tab_group_section.add(duetButton);
		tab_group_section.add(mirrorButton);

		UI_box.addGroup(tab_group_section);
	}

	var stepperSusLength;
	var strumTimeInputText; //I wanted to use a stepper but we can't scale these as far as i know :(
	var noteTypeDropDown;
	var currentType = 0;

	var stepperAltNote;

	function addNoteUI()
	{
		var tab_group_note = new FlxUI(null, UI_box);
		tab_group_note.name = 'Note';

		stepperSusLength = new FlxUINumericStepper(10, 25, Conductor.stepCrochet / 2, 0, 0, Conductor.stepCrochet * 64);
		stepperSusLength.value = 0;
		stepperSusLength.name = 'note_susLength';
		blockPressWhileTypingOnStepper.push(stepperSusLength);

		strumTimeInputText = new FlxUIInputText(10, 65, 180, "0");
		tab_group_note.add(strumTimeInputText);
		blockPressWhileTypingOn.push(strumTimeInputText);


		isAltNoteCheck = new FlxUICheckBox(160, 265, null, null, "Alt Anim Note", 100);
		isAltNoteCheck.name = "isAltNote";
		stepperAltNote = new FlxUINumericStepper(160, 305, 1, 0, 0, 999, 0);
		stepperAltNote.value = 0;
		stepperAltNote.name = 'alt_anim_note';

		stepperAltAnim = new FlxUINumericStepper(160, 285, 1, Conductor.bpm, 0, 999, 0);
		stepperAltAnim.value = 0;
		stepperAltAnim.name = 'alt_anim_number';


		var key = 0;
		var displayNameList = [];
		while (key < noteTypeList.length) {
			displayNameList.push(noteTypeList[key]);
			noteTypeMap.set(noteTypeList[key], key);
			noteTypeIntMap.set(key, noteTypeList[key]);
			key++;
		}

		if (luaallowed){
		var directories = [];
        directories.push(Paths.getPreloadPath('custom_notetypes/'));
		if (modsAllow){
	
		directories.push(Paths.mods('custom_notetypes/'));
		directories.push(Paths.mods(Paths.currentModDirectory + '/custom_notetypes/'));
		for(mod in Paths.getGlobalMods())
			directories.push(Paths.mods(mod + '/custom_notetypes/'));
    }

		for (i in 0...directories.length) {
			var directory =  directories[i];
			if(FileSystem.exists(directory)) {
				for (file in FileSystem.readDirectory(directory)) {
					var path = Path.join([directory, file]);
					if (!FileSystem.isDirectory(path) && (StringTools.endsWith(file,'.lua') || (StringTools.endsWith(file,'.hscript')))) {
						var fileToCheck = file.substr(0, if (StringTools.endsWith(file,'.hscript')) file.length - 8 else file.length - 4);
						if(!noteTypeMap.exists(fileToCheck)) {
							displayNameList.push(fileToCheck);
							noteTypeMap.set(fileToCheck, key);
							noteTypeIntMap.set(key, fileToCheck);
							key++;
						}
					}
				}
			}
		}
	}

		for (i in 1...displayNameList.length) {
			displayNameList[i] = i + '. ' + displayNameList[i];
		}

		noteTypeDropDown = new FlxUIDropDownMenuCustom(10, 105, FlxUIDropDownMenuCustom.makeStrIdLabelArray(displayNameList, true), function(character)
		{
			currentType = Std.parseInt(character);
			if(curSelectedNote != null && curSelectedNote[1] > -1) {
				curSelectedNote[3] = noteTypeIntMap.get(currentType);
				updateGrid();
			}
		});
		blockPressWhileScrolling.push(noteTypeDropDown);

		tab_group_note.add(new FlxText(10, 10, 0, 'Sustain length:'));
		tab_group_note.add(new FlxText(10, 50, 0, 'Strum time (in miliseconds):'));
		tab_group_note.add(new FlxText(10, 90, 0, 'Note type:'));
		tab_group_note.add(stepperSusLength);
		tab_group_note.add(strumTimeInputText);
		tab_group_note.add(noteTypeDropDown);
		tab_group_note.add(isAltNoteCheck);
		tab_group_note.add(stepperAltNote);
		tab_group_note.add(stepperAltAnim);
		UI_box.addGroup(tab_group_note);
	}

	var eventDropDown;
	var descText;
	var selectedEventText;
	function addEventsUI()
	{
		var tab_group_event = new FlxUI(null, UI_box);
		tab_group_event.name = 'Events';

		if (luaallowed){
		var eventPushedMap = new Map();
		var directories = [];

        if (modsAllow){
		directories.push(Paths.mods('custom_events/'));
		directories.push(Paths.mods(Paths.currentModDirectory + '/custom_events/'));
		for(mod in Paths.getGlobalMods())
			directories.push(Paths.mods(mod + '/custom_events/'));
	}

		for (i in 0...directories.length) {
			var directory =  directories[i];
			if(FNFAssets.exists(directory)) {
				for (file in FileSystem.readDirectory(directory)) {
					var path = Path.join([directory, file]);
					if (!FileSystem.isDirectory(path) && file != 'readme.txt' && StringTools.endsWith(file, '.txt')) {
						var fileToCheck = file.substr(0, file.length - 4);
						if(!eventPushedMap.exists(fileToCheck)) {
							eventPushedMap.set(fileToCheck, true);
							eventStuff.push([fileToCheck, FNFAssets.getText(path)]);
						}
					}
				}
			}
		}


		eventPushedMap.clear();
		eventPushedMap = null;
    }

		if (sysTarget)
			{
				var eventPushedMap = new Map();
				var directories = [SUtil.getPath() + 'windose_data/custom_events/'];
				for (i in 0...directories.length) {
					var directory =  directories[i];
					if(FNFAssets.exists(directory)) 
					{	
						for (file in FileSystem.readDirectory(directory)) {
							var path = Path.join([directory, file]);
							if (!FileSystem.isDirectory(path) && file != 'readme.txt' && StringTools.endsWith(file, '.txt')) {
								var fileToCheck = file.substr(0, file.length - 4);
								if(!eventPushedMap.exists(fileToCheck)) {
									eventPushedMap.set(fileToCheck, true);
									eventStuff.push([fileToCheck, FNFAssets.getText(path)]);
								}
							}
						}
					}
				}
				eventPushedMap.clear();
				eventPushedMap = null;
			}
		descText = new FlxText(20, 220, 0, eventStuff[0][0]);

		var leEvents = [];
		for (i in 0...eventStuff.length) {
			leEvents.push(eventStuff[i][0]);
		}

		var text:FlxText = new FlxText(20, 30, 0, "Event:");
		tab_group_event.add(text);
		eventDropDown = new FlxUIDropDownMenuCustom(20, 50, FlxUIDropDownMenuCustom.makeStrIdLabelArray(leEvents, true), function(pressed) {
			var selectedEvent = Std.parseInt(pressed);
			descText.text = eventStuff[selectedEvent][1];
				if (curSelectedNote != null &&  eventStuff != null) {
				if (curSelectedNote != null && curSelectedNote[2] == null){
				curSelectedNote[1][curEventSelected][0] = eventStuff[selectedEvent][0];

				}
				updateGrid();
			}
		});
		blockPressWhileScrolling.push(eventDropDown);

		var text = new FlxText(20, 90, 0, "Value 1:");
		tab_group_event.add(text);
		value1InputText = new FlxUIInputText(20, 110, 100, "");
		blockPressWhileTypingOn.push(value1InputText);

		var text = new FlxText(20, 130, 0, "Value 2:");
		tab_group_event.add(text);
		value2InputText = new FlxUIInputText(20, 150, 100, "");
		blockPressWhileTypingOn.push(value2InputText);

		var text = new FlxText(20, 170, 0, "Value 3:");
		tab_group_event.add(text);
		value3InputText = new FlxUIInputText(20, 190, 100, "");
		blockPressWhileTypingOn.push(value3InputText);
		// New event buttons
		var removeButton = new FlxButton(eventDropDown.x + eventDropDown.width + 10, eventDropDown.y, '-', function()
		{
			if(curSelectedNote != null && curSelectedNote[2] == null) //Is event note
			{
				if(curSelectedNote[1].length < 2)
				{
					_song.events.remove(curSelectedNote);
					curSelectedNote = null;
				}
				else
				{
					curSelectedNote[1].remove(curSelectedNote[1][curEventSelected]);
				}

				var eventsGroup;
				--curEventSelected;
				if(curEventSelected < 0) curEventSelected = 0;
				else if(curSelectedNote != null && curEventSelected >= (eventsGroup = curSelectedNote[1]).length) curEventSelected = eventsGroup.length - 1;

				changeEventSelected();
				updateGrid();
			}
		});
		removeButton.setGraphicSize(Std.int(removeButton.height), Std.int(removeButton.height));
		removeButton.updateHitbox();
		removeButton.color = FlxColor.RED;
		removeButton.label.color = FlxColor.WHITE;
		removeButton.label.size = 12;
		setAllLabelsOffset(removeButton, -30, 0);
		tab_group_event.add(removeButton);

		var addButton = new FlxButton(removeButton.x + removeButton.width + 10, removeButton.y, '+', function()
		{
			if(curSelectedNote != null && curSelectedNote[2] == null) //Is event note
			{
				var eventsGroup = curSelectedNote[1];
				eventsGroup.push(['', '', '', '']);

				changeEventSelected(1);
				updateGrid();
			}
		});
		addButton.setGraphicSize(Std.int(removeButton.width), Std.int(removeButton.height));
		addButton.updateHitbox();
		addButton.color = FlxColor.GREEN;
		addButton.label.color = FlxColor.WHITE;
		addButton.label.size = 12;
		setAllLabelsOffset(addButton, -30, 0);
		tab_group_event.add(addButton);

		var moveLeftButton = new FlxButton(addButton.x + addButton.width + 20, addButton.y, '<', function()
		{
			changeEventSelected(-1);
		});
		moveLeftButton.setGraphicSize(Std.int(addButton.width), Std.int(addButton.height));
		moveLeftButton.updateHitbox();
		moveLeftButton.label.size = 12;
		setAllLabelsOffset(moveLeftButton, -30, 0);
		tab_group_event.add(moveLeftButton);

		var moveRightButton = new FlxButton(moveLeftButton.x + moveLeftButton.width + 10, moveLeftButton.y, '>', function()
		{
			changeEventSelected(1);
		});
		moveRightButton.setGraphicSize(Std.int(moveLeftButton.width), Std.int(moveLeftButton.height));
		moveRightButton.updateHitbox();
		moveRightButton.label.size = 12;
		setAllLabelsOffset(moveRightButton, -30, 0);
		tab_group_event.add(moveRightButton);

		selectedEventText = new FlxText(addButton.x - 100, addButton.y + addButton.height + 6, (moveRightButton.x - addButton.x) + 186, 'Selected Event: None');
		selectedEventText.alignment = 'center';
		tab_group_event.add(selectedEventText);

		tab_group_event.add(descText);
		tab_group_event.add(value1InputText);
		tab_group_event.add(value2InputText);
		tab_group_event.add(value3InputText);
		tab_group_event.add(eventDropDown);

		UI_box.addGroup(tab_group_event);
	}

	function changeEventSelected(change)
	{
		if(curSelectedNote != null && curSelectedNote[2] == null) //Is event note
		{
			curEventSelected += change;
			if(curEventSelected < 0) curEventSelected = Std.int(curSelectedNote[1].length) - 1;
			else if(curEventSelected >= curSelectedNote[1].length) curEventSelected = 0;
			selectedEventText.text = 'Selected Event: ' + (curEventSelected + 1) + ' / ' + curSelectedNote[1].length;
		}
		else
		{
			curEventSelected = 0;
			selectedEventText.text = 'Selected Event: None';
		}
		updateNoteUI();
	}

	function setAllLabelsOffset(button, x, y)
	{
		for (point in button.labelOffsets)
		{
			point.set(x, y);
		}
	}

	var metronome;
	var mouseScrollingQuant;
	var metronomeStepper;
	var metronomeOffsetStepper;
	var disableAutoScrolling;

	var waveformUseInstrumental;
	var waveformUseVoices;
    
	var instVolume;
	var voicesVolume;
	var sfxVolume;
	function addChartingUI() {
		var tab_group_chart = new FlxUI(null, UI_box);
		tab_group_chart.name = 'Charting';

		if (desktop){
		if (FlixG.save.data.chart_waveformInst == null) FlixG.save.data.chart_waveformInst = false;
		if (FlixG.save.data.chart_waveformVoices == null) FlixG.save.data.chart_waveformVoices = false;

		waveformUseInstrumental = new FlxUICheckBox(10, 90, null, null, "Waveform for Instrumental", 100);
		waveformUseInstrumental.checked = FlixG.save.data.chart_waveformInst;
		waveformUseInstrumental.callback = function()
		{
			waveformUseVoices.checked = false;
			FlixG.save.data.chart_waveformVoices = false;
			FlixG.save.data.chart_waveformInst = waveformUseInstrumental.checked;
			updateWaveform();
		};

		waveformUseVoices = new FlxUICheckBox(waveformUseInstrumental.x + 120, waveformUseInstrumental.y, null, null, "Waveform for Voices", 100);
		waveformUseVoices.checked = FlixG.save.data.chart_waveformVoices;
		waveformUseVoices.callback = function()
		{
			waveformUseInstrumental.checked = false;
			FlixG.save.data.chart_waveformInst = false;
			FlixG.save.data.chart_waveformVoices = waveformUseVoices.checked;
			updateWaveform();
		};
    }

		check_mute_inst = new FlxUICheckBox(10, 310, null, null, "Mute Instrumental (in editor)", 100);
		check_mute_inst.checked = false;
		check_mute_inst.callback = function()
		{
			var vol = 1;

			if (check_mute_inst.checked)
				vol = 0;

			FlxG.sound.music.volume = vol;
		};
		mouseScrollingQuant = new FlxUICheckBox(10, 200, null, null, "Mouse Scrolling Quantization", 100);
		if (FlixG.save.data.mouseScrollingQuant == null) FlixG.save.data.mouseScrollingQuant = false;
		mouseScrollingQuant.checked = FlixG.save.data.mouseScrollingQuant;

		mouseScrollingQuant.callback = function()
		{
			FlixG.save.data.mouseScrollingQuant = mouseScrollingQuant.checked;
			mouseQuant = FlixG.save.data.mouseScrollingQuant;
		};

		check_vortex = new FlxUICheckBox(10, 160, null, null, "Vortex Editor (BETA)", 100);
		if (FlixG.save.data.chart_vortex == null) FlixG.save.data.chart_vortex = false;
		check_vortex.checked = FlixG.save.data.chart_vortex;

		check_vortex.callback = function()
		{
			FlixG.save.data.chart_vortex = check_vortex.checked;
			vortex = FlixG.save.data.chart_vortex;
			reloadGridLayer();
		};

		check_warnings = new FlxUICheckBox(10, 120, null, null, "Ignore Progress Warnings", 100);
		if (FlixG.save.data.ignoreWarnings == null) FlixG.save.data.ignoreWarnings = false;
		check_warnings.checked = FlixG.save.data.ignoreWarnings;

		check_warnings.callback = function()
		{
			FlixG.save.data.ignoreWarnings = check_warnings.checked;
			ignoreWarnings = FlixG.save.data.ignoreWarnings;
		};

		var check_mute_vocals = new FlxUICheckBox(check_mute_inst.x + 120, check_mute_inst.y, null, null, "Mute Vocals (in editor)", 100);
		check_mute_vocals.checked = false;
		check_mute_vocals.callback = function()
		{
			if(vocals != null) {
				var vol = 1;

				if (check_mute_vocals.checked)
					vol = 0;

				vocals.volume = vol;
			}
		};

	

		playSoundBf = new FlxUICheckBox(check_mute_inst.x, check_mute_vocals.y + 30, null, null, 'Play Sound (Boyfriend notes)', 100,
			function() {
				FlixG.save.data.chart_playSoundBf = playSoundBf.checked;
			}
		);
		if (FlixG.save.data.chart_playSoundBf == null) FlixG.save.data.chart_playSoundBf = false;
		playSoundBf.checked = FlixG.save.data.chart_playSoundBf;

		playSoundDad = new FlxUICheckBox(check_mute_inst.x + 120, playSoundBf.y, null, null, 'Play Sound (Opponent notes)', 100,
			function() {
				FlixG.save.data.chart_playSoundDad = playSoundDad.checked;
			}
		);

	
		if (FlixG.save.data.chart_playSoundDad == null) FlixG.save.data.chart_playSoundDad = false;
		playSoundDad.checked = FlixG.save.data.chart_playSoundDad;

		playSoundExtra = new FlxUICheckBox(check_mute_inst.x + 120, 270 - 30, null, null, 'Play Sound (Extra STRUM NOTES)', 100,
		function() {
			FlixG.save.data.chart_playSoundExtra = playSoundExtra.checked;
		}
	);
	
	if (FlixG.save.data.chart_playSoundExtra == null) FlixG.save.data.chart_playSoundExtra = false;
	playSoundExtra.checked = FlixG.save.data.chart_playSoundExtra;

		metronome = new FlxUICheckBox(10, 15, null, null, "Metronome Enabled", 100,
			function() {
				FlixG.save.data.chart_metronome = metronome.checked;
			}
		);

		var check_mute_sfx = new FlxUICheckBox(check_mute_inst.x,playSoundExtra.y - 5, null, null, "Mute SFX (in editor)", 100);
		check_mute_sfx.checked = false;
		check_mute_sfx.callback = function()
		{
			if(sfx != null) {
				var vol = 1;

				if (check_mute_sfx.checked)
					vol = 0;

				sfx.volume = vol;
			}
		};

		if (FlixG.save.data.chart_metronome == null) FlixG.save.data.chart_metronome = false;
		metronome.checked = FlixG.save.data.chart_metronome;

		metronomeStepper = new FlxUINumericStepper(15, 55, 5, _song.bpm, 1, 1500, 1);
		metronomeOffsetStepper = new FlxUINumericStepper(metronomeStepper.x + 100, metronomeStepper.y, 25, 0, 0, 1000, 1);
		blockPressWhileTypingOnStepper.push(metronomeStepper);
		blockPressWhileTypingOnStepper.push(metronomeOffsetStepper);

		disableAutoScrolling = new FlxUICheckBox(metronome.x + 120, metronome.y, null, null, "Disable Autoscroll (Not Recommended)", 120,
			function() {
				FlixG.save.data.chart_noAutoScroll = disableAutoScrolling.checked;
			}
		);
		if (FlixG.save.data.chart_noAutoScroll == null) FlixG.save.data.chart_noAutoScroll = false;
		disableAutoScrolling.checked = FlixG.save.data.chart_noAutoScroll;

		instVolume = new FlxUINumericStepper(metronomeStepper.x, 270, 0.1, 1, 0, 1, 1);
		instVolume.value = FlxG.sound.music.volume;
		instVolume.name = 'inst_volume';
		blockPressWhileTypingOnStepper.push(instVolume);

		voicesVolume = new FlxUINumericStepper(instVolume.x + 100, instVolume.y, 0.1, 1, 0, 1, 1);
		voicesVolume.value = vocals.volume;
		voicesVolume.name = 'voices_volume';
		blockPressWhileTypingOnStepper.push(voicesVolume);

		sfxVolume = new FlxUINumericStepper(playSoundExtra.x, check_vortex.y, 0.1, 1, 0, 1, 1);
		sfxVolume.value = sfx.volume;
		sfxVolume.name = 'sfx_volume';
		blockPressWhileTypingOnStepper.push(sfxVolume);

		tab_group_chart.add(new FlxText(metronomeStepper.x, metronomeStepper.y - 15, 0, 'BPM:'));
		tab_group_chart.add(new FlxText(metronomeOffsetStepper.x, metronomeOffsetStepper.y - 15, 0, 'Offset (ms):'));
		tab_group_chart.add(new FlxText(instVolume.x, instVolume.y - 15, 0, 'Inst Volume'));
		tab_group_chart.add(new FlxText(voicesVolume.x, voicesVolume.y - 15, 0, 'Voices Volume'));
		tab_group_chart.add(new FlxText(sfxVolume.x, sfxVolume.y - 15, 0, 'Sfx Volume'));
		tab_group_chart.add(metronome);
		tab_group_chart.add(disableAutoScrolling);
		tab_group_chart.add(metronomeStepper);
		tab_group_chart.add(metronomeOffsetStepper);
		if (desktop){
		tab_group_chart.add(waveformUseInstrumental);
		tab_group_chart.add(waveformUseVoices);
}
		tab_group_chart.add(instVolume);
		tab_group_chart.add(voicesVolume);
		tab_group_chart.add(sfxVolume);
		tab_group_chart.add(check_mute_inst);
		tab_group_chart.add(check_mute_vocals);
		tab_group_chart.add(check_mute_sfx);
		tab_group_chart.add(check_vortex);
		tab_group_chart.add(mouseScrollingQuant);
		tab_group_chart.add(check_warnings);
		tab_group_chart.add(playSoundBf);
		tab_group_chart.add(playSoundDad);
		tab_group_chart.add(playSoundExtra);
		UI_box.addGroup(tab_group_chart);
	}

	function loadSong()
	{
		if (FlxG.sound.music != null)
		{
			FlxG.sound.music.stop();
			// vocals.stop();
		}
		if (vocals != null)
			{
				vocals.stop();
				vocals.clear();
				// vocals.stop();
			}
			if (sfx != null)
				{
					sfx.stop();
					sfx.clear();
					// vocals.stop();
				}
		var file = Paths.songStuffer(currentSongName,songFileNames[1]);
	      if (vocals == null)
			vocals = new VoicesGroup();
		  add(vocals);
		  if (sfx == null)
			sfx = new VoicesGroup();
		  add(sfx);
	
			for (i in playerVocalFiles){
			var fileP = Paths.songStuffer(currentSongName,songFileNames[1] + '-' + i);
			if (Std.isOfType(fileP, Sound) || OpenFlAssets.exists(fileP)) {
				   var snd = new FlxSound();
				   snd.loadEmbedded(fileP);
				   vocals.addPlayerVoice(snd);
			}
		}

		for (i in opponentVocalFiles){
			var fileO = Paths.songStuffer(currentSongName,songFileNames[1] + '-' + i);
			if (Std.isOfType(fileO, Sound) || OpenFlAssets.exists(fileO)) {
				   var snd:FlxSound = new FlxSound();
				   snd.loadEmbedded(fileO);
				   vocals.addOpponentVoice(snd);
			}
		}
	
		if (vocals.playerVoices.members.length<=0|| vocals.opponentVoices.members.length<=0){
		if (Std.isOfType(file, Sound) || OpenFlAssets.exists(file)) {
			var snd = new FlxSound();
			snd.loadEmbedded(file);
			vocals.add(snd);
		}
	}
	

	if (sfxFiles.length > 0){
		for (i in sfxFiles){
			var fileSFX = Paths.songStuffer(currentSongName,i);
			if (Std.isOfType(fileSFX, Sound) || OpenFlAssets.exists(fileSFX)) {
				   var snd:FlxSound = new FlxSound();
				   snd.loadEmbedded(fileSFX);
				   sfx.add(snd);
			}
		}
	}
		generateSong();
		FlxG.sound.music.pause();
		Conductor.songPosition = sectionStartTime(0);
		FlxG.sound.music.time = Conductor.songPosition;
        
        var lastChange = {
			stepTime: 0,
			songTime: 0,
			bpm: 0
		}
		for (i in 0...Conductor.bpmChangeMap.length)
		{
			if (FlxG.sound.music.time > Conductor.bpmChangeMap[i].songTime)
				lastChange = Conductor.bpmChangeMap[i];
		}

        theLastStep = lastChange.stepTime + Math.floor((FlxG.sound.music.length - lastChange.songTime) / Conductor.stepCrochet);
        trace(theLastStep);
	}
    var curSel = 0;
	function generateSong() {
		FlxG.sound.playMusic(Paths.songStuffer(currentSongName,songFileNames[0]), 0.6/*, false*/);
		if (instVolume != null) FlxG.sound.music.volume = instVolume.value;
		if (check_mute_inst != null && check_mute_inst.checked) FlxG.sound.music.volume = 0;

		FlxG.sound.music.onComplete = function()
		{
			FlxG.sound.music.pause();
			Conductor.songPosition = 0;
			if(vocals != null) {
				vocals.pause();
				vocals.time = 0;
			}
			if(sfx != null) {
				sfx.pause();
				sfx.time = 0;
			}
			changeSection(0,true);
			curSec = 0;
			updateGrid();
			updateSectionUI();
			vocals.play();
			sfx.play();
		};
	}

	function generateUI()
	{
		while (bullshitUI.members.length > 0)
		{
			bullshitUI.remove(bullshitUI.members[0], true);
		}

		// general shit
		var title = new FlxText(UI_box.x + 20, UI_box.y + 20, 0);
		bullshitUI.add(title);
	}
	var noway = -1;
	var oldstrum = 2;
	function getEvent(id, sender, data, params)
	{
	
		if (id == "click_check_box")
		{
			var check:FlxUICheckBox =  sender;
			var label = check.getLabel().text;
			switch (label)
			{
				case 'Must hit section':
					_song.notes[curSec].mustHitSection = check.checked;

					updateGrid();
					updateHeads();

				case 'GF section':
					_song.notes[curSec].gfSection = check.checked;

					updateGrid();
					updateHeads();

				case 'Change BPM':
					_song.notes[curSec].changeBPM = check.checked;
					FlixG.log.add('changed bpm shit');
				case "Alt Animation":
// _song.notes[curSec].altAnim = check.checked;

case 'Alt Anim Note':
	if (curSelectedNote != null) {
        var cheker = 0;
        if ( check.checked)
            cheker = 1;
		curSelectedNote[4] = cheker;
	}
	updateNoteUI();
			}
		}
		else if (id == "change_numeric_stepper"&& Std.isOfType(sender,FlxUINumericStepper))
		{
			var nums =  sender;
			var wname = nums.name;
			FlixG.log.add(wname);
			if (wname == 'section_beats')
			{
				_song.notes[curSec].sectionBeats = nums.value;
				reloadGridLayer();
			}
			else if (wname == 'song_speed')
			{
				_song.speed = nums.value;
			}
			else if (wname == 'song_bpm')
			{
				tempBpm = nums.value;
				Conductor.mapBPMChanges(_song);
				Conductor.changeBPM(nums.value);
			}
			else if (wname == 'note_susLength')
			{
				if(curSelectedNote != null && curSelectedNote[1] > -1) {
					curSelectedNote[2] = nums.value;
					updateGrid();
				} else {
					sender.value = 0;
				}
			}
			else if (wname == 'section_bpm')
			{
				_song.notes[curSec].bpm = nums.value;
				updateGrid();
			}
			else if (wname == 'strum_nums')
				{
					curStrums = Std.int(nums.value);
					_song.strums = curStrums;
					
					if (curStrums < oldstrum){
					
						noway = _song.notes.length -1;
				while(noway > -1) {
					var dasec = _song.notes[noway].sectionNotes;
					for (x in dasec){
				
						var danoteStrum = Math.floor(x[1] / Note.NOTE_AMOUNT);
                                    if (danoteStrum >= oldstrum-1){
										dasec.remove(x);
									}
					
				}
					--noway;
				
				}
			}
					
					oldstrum = curStrums;
					reloadGridLayer();
				}
			else if (wname == 'inst_volume')
			{
				FlxG.sound.music.volume = nums.value;
			}
			else if (wname == 'voices_volume')
			{
				vocals.volume = nums.value;
			} 
			else if (wname == 'sfx_volume')
				{
					sfx.volume = nums.value;
				} 
			else if (wname == 'alt_anim_number')
			{
				_song.notes[curSec].altAnimNum = Std.int(nums.value);
			}  else if (wname == 'alt_anim_note') {
				if (curSelectedNote != null)
					curSelectedNote[4] = nums.value;
				updateNoteUI();
			}
		}
		else if(id == "change_input_text" && Std.isOfType(sender,FlxUIInputText)) {
			if(sender == playerInputText) {
				if (playerVocalFiles.length > 0){
					playerVocalFiles[curPVSelected] = playerInputText.text;
					_song.playerVocalFiles = playerVocalFiles;
					loadSong();
				}
			}
			else if(sender == oppoInputText) {
				if (opponentVocalFiles.length > 0){
					opponentVocalFiles[curOVSelected] = oppoInputText.text;
					_song.opponentVocalFiles = opponentVocalFiles;
					loadSong();
				}
			}
			else  if(sender == sfxInputText) {
				if (sfxFiles.length > 0){
					sfxFiles[curSFXSelected] = sfxInputText.text;
					_song.sfxFiles = sfxFiles;
					loadSong();
				}
			}else if(sender == noteSplashesInputText) {
				_song.splashSkin = noteSplashesInputText.text;
			}
			else if(curSelectedNote != null)
			{
				if(sender == value1InputText) {
					curSelectedNote[1][curEventSelected][1] = value1InputText.text;
					updateGrid();
				}
				else if(sender == value2InputText) {
					curSelectedNote[1][curEventSelected][2] = value2InputText.text;
					updateGrid();
				}
				else  if(sender == value3InputText) {
					curSelectedNote[1][curEventSelected][3] = value3InputText.text;
					updateGrid();
				}
				else if(sender == strumTimeInputText) {
					var value = Std.parseFloat(strumTimeInputText.text);
					if(Math.isNaN(value)) value = 0;
					curSelectedNote[0] = value;
					updateGrid();
				}
			}
		}
	}
		
	

	var updatedSection = false;

	function sectionStartTime(add)
	{
		var daBPM = _song.bpm;
		var daPos = -1;
		for (i in 0...curSec + add)
		{
			if(_song.notes[i] != null)
			{
				if (_song.notes[i].changeBPM)
				{
					daBPM = _song.notes[i].bpm;
				}
				daPos += getSectionBeats(i) * (1000 * 60 / daBPM);
			}
		}
		return daPos;
	}
	
	var lastConductorPos;
	var colorSine = 0;
	function update(elapsed)
	{
		refresh();
		curStep = recalculateSteps(0);

		if(FlxG.sound.music.time < 0) {
			FlxG.sound.music.pause();
			FlxG.sound.music.time = 0;
		}
		else if(FlxG.sound.music.time > FlxG.sound.music.length) {
			FlxG.sound.music.pause();
			FlxG.sound.music.time = 0;
			changeSection(0,true);
		}
		Conductor.songPosition = FlxG.sound.music.time;
		_song.song = UI_songTitle.text;
		_song.stage = stageTextField.text;
		_song.cutsceneType = cutsceneTextField.text;
		_song.uiType = uiTextField.text;
		_song.composer = composerTextField.text;
		strumLineUpdateY();
		for (i in 0...strumLineNotes.members.length){
			strumLineNotes.members[i].y = strumLine.y;
		}

		FlixG.mouse.visible = true;//cause reasons. trust me
		camPos.y = strumLine.y;
		//waveformSprite.y = strumLine.y;
		if(!disableAutoScrolling.checked) {
			if (Math.ceil(strumLine.y) >= gridBG.height)
			{
				if (_song.notes[curSec + 1] == null)
				{
					addSection(4);
				}

				changeSection(curSec + 1, false);
			} else if(strumLine.y < -10) {
				changeSection(curSec - 1, false);
			}
		}
		FlixG.watch.addQuick('daBeat', curBeat);
		FlixG.watch.addQuick('daStep', curStep);

		var blockInput = false;
		for (inputText in blockPressWhileTypingOn) {
			if(inputText.hasFocus) {
				FlixG.sound.muteKeys = [];
				FlixG.sound.volumeDownKeys = [];
				FlixG.sound.volumeUpKeys = [];
				blockInput = true;
				break;
			}
		}

		if(!blockInput) {
			for (stepper in blockPressWhileTypingOnStepper) {
				var leText = getStepperTextField(stepper);
				var leText = leText;
				if(leText.hasFocus) {
					FlixG.sound.muteKeys = [];
					FlixG.sound.volumeDownKeys = [];
					FlixG.sound.volumeUpKeys = [];
					blockInput = true;
					break;
				}
				
			}
		}

		if(!blockInput) {
			FlixG.sound.muteKeys = TitleState.muteKeys;
			FlixG.sound.volumeDownKeys = TitleState.volumeDownKeys;
			FlixG.sound.volumeUpKeys = TitleState.volumeUpKeys;
			for (dropDownMenu in blockPressWhileScrolling) {
				if(dropDownMenu.dropPanel.visible) {
					blockInput = true;
					break;
				}
			}
		}
		if(!blockInput) {
		if (FlixG.mouse.x > gridBG.x
			&& FlixG.mouse.x < gridBG.x + gridBG.width
			&& FlixG.mouse.y > gridBG.y
			&& FlixG.mouse.y < gridBG.y + (GRID_SIZE * getSectionBeats(null) * 4) * zoomList[curZoom])
		{
			dummyArrow.visible = true;
			dummyArrow.x = Math.floor(FlixG.mouse.x / GRID_SIZE) * GRID_SIZE;
			if (FlxG.keys.pressed.SHIFT)
				dummyArrow.y = FlixG.mouse.y;
			else
			{
				var gridmult = GRID_SIZE / (quantization / 16);
				dummyArrow.y = Math.floor(FlixG.mouse.y / gridmult) * gridmult;
			}
		} else {
			dummyArrow.visible = false;
		}

		if (FlixG.mouse.justPressed)
		{
			if (FlixG.mouse.overlaps(curRenderedNotes))
			{
				curRenderedNotes.forEachAlive(function(note)
				{
					if (FlixG.mouse.overlaps(note))
					{
						if (FlxG.keys.pressed.CONTROL  || (mobile && visPressed('D') ))
						{
							autosaveSong();
							selectNote(note);
						}
						else if (FlxG.keys.pressed.ALT && curSelectedNote.length <= 3)
						{
							autosaveSong();
							selectNote(note);
							curSelectedNote[3] = noteTypeIntMap.get(currentType);
							updateGrid();
						}
						else
						{
							//trace('tryin to delete note...');
							autosaveSong();
							deleteNote(note);
						}
					}
				});
			}
			else
			{
				if (FlixG.mouse.x > gridBG.x
					&& FlixG.mouse.x < gridBG.x + gridBG.width
					&& FlixG.mouse.y > gridBG.y
					&& FlixG.mouse.y < gridBG.y + (GRID_SIZE * getSectionBeats(null) * 4) * zoomList[curZoom])
				{
					FlixG.log.add('added note');
					addNote(null,null,null);
				}
			}
		}
	}
		

	
		if (!blockInput)
		{
			if (FlxG.keys.justPressed.ESCAPE  || (android && FlixG.android.justReleased.BACK))
			{
                ChartingState.lastSection = curSec;
				autosaveSong();
				LoadingState.loadAndSwitchState(new EditorPlayState(sectionStartTime(0)));
			}
			if (FlxG.keys.justPressed.ENTER || (mobile && visPressed('A') ))
			{
                ChartingState.lastSection = curSec;
                trace(ChartingState.lastSection);
				autosaveSong();
				FlixG.mouse.visible = false;
				PlayState.SONG = _song;
			
				FlxG.sound.music.stop();
				if(vocals != null) vocals.stop();
				if(sfx != null) sfx.stop();
				//if(_song.stage == null) _song.stage = stageDropDown.selectedLabel;
				StageData.loadDirectory(_song);
				LoadingState.loadAndSwitchState(new PlayState());
			}

			if(curSelectedNote != null && curSelectedNote[1] > -1) {
				if (FlxG.keys.justPressed.E)
				{
					changeNoteSustain(Conductor.stepCrochet);
				}
				if (FlxG.keys.justPressed.Q)
				{
					changeNoteSustain(-Conductor.stepCrochet);
				}
			}


			if (FlxG.keys.justPressed.BACKSPACE || (mobile && visPressed('B') )){
				//if(onMasterEditor) {
					MusicBeatState.switchState(new MasterEditorMenu());
					FlxG.sound.playMusic(Paths.music('freakyMenu1'));
				//}
				FlixG.mouse.visible = false;
				return;
			}

			if(FlxG.keys.justPressed.Z && FlxG.keys.pressed.CONTROL) {
				undo();
			}



			if((FlxG.keys.justPressed.Z || (mobile && visPressed('Z') )) && curZoom > 0 && !FlxG.keys.pressed.CONTROL) {
				--curZoom;
				updateZoom();
			}
			if((FlxG.keys.justPressed.X  || (mobile && visPressed('Z') )) && curZoom < zoomList.length-1) {
				curZoom++;
				updateZoom();
			}

			if (FlxG.keys.justPressed.TAB)
			{
				if (FlxG.keys.pressed.SHIFT)
				{
					UI_box.selected_tab -= 1;
					if (UI_box.selected_tab < 0)
						UI_box.selected_tab = 4;
				}
				else
				{
					UI_box.selected_tab += 1;
					if (UI_box.selected_tab >= 5)
						UI_box.selected_tab = 0;
				}
			}
			
					if (FlxG.keys.pressed.J)
					{
						camPos.x -=10;
					}
					else if (FlxG.keys.pressed.K)
					{
						camPos.x +=10;
					}
				
			if (FlxG.keys.justPressed.SPACE || (mobile && visPressed('X') ))
			{
				if (FlxG.sound.music.playing)
				{
					FlxG.sound.music.pause();
					if(vocals != null) vocals.pause();
					if(sfx != null) sfx.pause();
					lilBf.animation.play("idle");
					lilOpp.animation.play("idle");
				}
				else
				{
                    FlxG.sound.music.play();
					if(vocals != null) {
						vocals.play();
						vocals.pause();
						vocals.time = FlxG.sound.music.time;
						vocals.play();

						lilBf.animation.play("idle");
						lilOpp.animation.play("idle");
					}
					if(sfx != null) {
						sfx.play();
						sfx.pause();
						sfx.time = FlxG.sound.music.time;
						sfx.play();

						
					}
					
				}
			}

			if (FlxG.keys.justPressed.R || (mobile && visPressed('V') ))
			{
				if (FlxG.keys.pressed.SHIFT || (mobile && visPressed('Y') ))
					resetSection(true);
				else
					resetSection(false);
			}

			if (FlixG.mouse.wheel != 0)
			{
				FlxG.sound.music.pause();
				if (!mouseQuant)
					FlxG.sound.music.time -= (FlixG.mouse.wheel * Conductor.stepCrochet*0.8);
				else
					{
						var time = FlxG.sound.music.time;
						var beat = curDecBeat;
						var snap = quantization / 4;
						var increase = 1 / snap;
						if (FlixG.mouse.wheel > 0)
						{
							var fuck = CoolUtil.quantize(beat, snap) - increase;
							FlxG.sound.music.time = Conductor.beatToSeconds(fuck);
						}else{
							var fuck = CoolUtil.quantize(beat, snap) + increase;
							FlxG.sound.music.time = Conductor.beatToSeconds(fuck);
						}
					}
				if(vocals != null) {
					vocals.pause();
					vocals.time = FlxG.sound.music.time;
				}
				if(sfx != null) {
					sfx.pause();
					sfx.time = FlxG.sound.music.time;
				}
				lilBf.animation.play("idle");
				lilOpp.animation.play("idle");
			}

			//ARROW VORTEX SHIT NO DEADASS



			if (FlxG.keys.pressed.W || FlxG.keys.pressed.S|| (mobile && visPressed('up') )|| (mobile && visPressed('down') ))
			{
				FlxG.sound.music.pause();

				lilBf.animation.play("idle");
				lilOpp.animation.play("idle");
				var holdingShift = 1;
				if (FlxG.keys.pressed.CONTROL) holdingShift = 0.25;
				else if (FlxG.keys.pressed.SHIFT || (mobile && visPressed('Y'))) holdingShift = 4;

				var daTime = 700 * FlxG.elapsed * holdingShift;

				if (FlxG.keys.pressed.W || (mobile && visPressed('up')))
				{
					FlxG.sound.music.time -= daTime;
				}
				else
					FlxG.sound.music.time += daTime;

				if(vocals != null) {
					vocals.pause();
					vocals.time = FlxG.sound.music.time;
				}
				if(sfx != null) {
					sfx.pause();
					sfx.time = FlxG.sound.music.time;
				}

			}

			if(!vortex){
				if (FlxG.keys.justPressed.UP || FlxG.keys.justPressed.DOWN  )
				{
					FlxG.sound.music.pause();

					lilBf.animation.play("idle");
					lilOpp.animation.play("idle");
					updateCurStep();
					var time = FlxG.sound.music.time;
					var beat = curDecBeat;
					var snap = quantization / 4;
					var increase = 1 / snap;
					if (FlxG.keys.pressed.UP)
					{
						var fuck = CoolUtil.quantize(beat, snap) - increase; //(Math.floor((beat+snap) / snap) * snap);
						FlxG.sound.music.time = Conductor.beatToSeconds(fuck);
					}else{
						var fuck = CoolUtil.quantize(beat, snap) + increase; //(Math.floor((beat+snap) / snap) * snap);
						FlxG.sound.music.time = Conductor.beatToSeconds(fuck);
					}
				}


			}

			var style = currentType;

			if (FlxG.keys.pressed.SHIFT || (mobile && visPressed('Y'))){
				style = 3;
			}

			var conductorTime = Conductor.songPosition; //+ sectionStartTime(0);Conductor.songPosition / Conductor.stepCrochet;

			//AWW YOU MADE IT SEXY <3333 THX SHADMAR

			if(!blockInput){
				if(FlxG.keys.justPressed.RIGHT){
					curQuant++;
					if(curQuant>quantizations.length-1)
						curQuant = 0;

					quantization = quantizations[curQuant];
				}

				if(FlxG.keys.justPressed.LEFT){
					curQuant--;
					if(curQuant<0)
						curQuant = quantizations.length-1;

					quantization = quantizations[curQuant];
				}
				quant.animation.play('q', true, false, curQuant);
			}
			if(vortex && !blockInput){
				var controlArray = [FlxG.keys.justPressed.ONE, FlxG.keys.justPressed.TWO, FlxG.keys.justPressed.THREE, FlxG.keys.justPressed.FOUR,
											   FlxG.keys.justPressed.FIVE, FlxG.keys.justPressed.SIX, FlxG.keys.justPressed.SEVEN, FlxG.keys.justPressed.EIGHT];

				if(controlArray.contains(true))
				{
					for (i in 0...controlArray.length)
					{
						if(controlArray[i]){
							autosaveSong();
							doANoteThing(conductorTime, i, style);
						}
					}
				}

				var feces;
				if (FlxG.keys.justPressed.UP || FlxG.keys.justPressed.DOWN  || (mobile && visPressed('up') )|| (mobile && visPressed('down') ) )
				{
					FlxG.sound.music.pause();


					updateCurStep();
					//FlxG.sound.music.time = (Math.round(curStep/quants[curQuant])*quants[curQuant]) * Conductor.stepCrochet;

						//(Math.floor((curStep+quants[curQuant]*1.5/(quants[curQuant]/2))/quants[curQuant])*quants[curQuant]) * Conductor.stepCrochet;//snap into quantization
					var time = FlxG.sound.music.time;
					var beat = curDecBeat;
					var snap = quantization / 4;
					var increase = 1 / snap;
					if (FlxG.keys.pressed.UP|| (mobile && visPressed('up') ))
					{
						var fuck = CoolUtil.quantize(beat, snap) - increase;
						feces = Conductor.beatToSeconds(fuck);
					}else{
						var fuck = CoolUtil.quantize(beat, snap) + increase; //(Math.floor((beat+snap) / snap) * snap);
						feces = Conductor.beatToSeconds(fuck);
					}
					FlxTween.tween(FlxG.sound.music, {time:feces}, 0.1, {ease:FlxEase.circOut});
					if(vocals != null) {
						vocals.pause();
						vocals.time = FlxG.sound.music.time;
					}
					if(sfx != null) {
						sfx.pause();
						sfx.time = FlxG.sound.music.time;
					}
					var dastrum = 0;

					if (curSelectedNote != null){
						dastrum = curSelectedNote[0];
					}

					var secStart = sectionStartTime(0);
					var datime = (feces - secStart) - (dastrum - secStart); //idk math find out why it doesn't work on any other section other than 0
					if (curSelectedNote != null)
					{
						var controlArray = [FlxG.keys.pressed.ONE, FlxG.keys.pressed.TWO, FlxG.keys.pressed.THREE, FlxG.keys.pressed.FOUR,
													   FlxG.keys.pressed.FIVE, FlxG.keys.pressed.SIX, FlxG.keys.pressed.SEVEN, FlxG.keys.pressed.EIGHT];

						if(controlArray.contains(true))
						{

							for (i in 0...controlArray.length)
							{
								if(controlArray[i])
									if(curSelectedNote[1] == i) curSelectedNote[2] += datime - curSelectedNote[2] - Conductor.stepCrochet;
							}
							updateGrid();
							updateNoteUI();
						}
					}
				}
			}
			var shiftThing = 1;
			if (FlxG.keys.pressed.SHIFT || (mobile && visPressed('Y') ))
				shiftThing = 4;

			if (FlxG.keys.justPressed.I) {
				--curSel;
				if (curSel < 0)
					curSel = vocals.members.length-1;
				if(FlixG.save.data.chart_waveformInst || FlixG.save.data.chart_waveformVoices) {
					updateWaveform();
				}
			} else if (FlxG.keys.justPressed.O) {
				
				curSel++;
				if (curSel >= vocals.members.length)
					curSel = 0;
				if(FlixG.save.data.chart_waveformInst || FlixG.save.data.chart_waveformVoices) {
					updateWaveform();
				}
			}
			
			if (FlxG.keys.justPressed.D || (mobile && visPressed('right') ) && !vortex|| FlxG.keys.justPressed.D || (mobile && visPressed('right') ))
				changeSection(curSec + shiftThing,true);
			if (FlxG.keys.justPressed.A || (mobile && visPressed('left') ) && !vortex|| FlxG.keys.justPressed.A || (mobile && visPressed('left') )) {
				if(curSec <= 0) {
					changeSection(_song.notes.length-1,true);
				} else {
					changeSection(curSec - shiftThing,true);
				}
            }
		} else if (FlxG.keys.justPressed.ENTER) {
			for (i in 0...blockPressWhileTypingOn.length) {
				if(blockPressWhileTypingOn[i].hasFocus) {
					blockPressWhileTypingOn[i].hasFocus = false;
				}
			}
		}

		_song.bpm = tempBpm;

		strumLineNotes.visible = quant.visible = vortex;

		if(FlxG.sound.music.time < 0) {
			FlxG.sound.music.pause();
			FlxG.sound.music.time = 0;
		}
		else if(FlxG.sound.music.time > FlxG.sound.music.length) {
			FlxG.sound.music.pause();
			FlxG.sound.music.time = 0;
			changeSection(0,true);
		}
		Conductor.songPosition = FlxG.sound.music.time;
		strumLineUpdateY();
		camPos.y = strumLine.y;
		for (i in 0...strumLineNotes.members.length){
			strumLineNotes.members[i].y = strumLine.y;
            var al = 0.35;
            if (FlxG.sound.music.playing)
                al = 1;
			strumLineNotes.members[i].alpha = al;
		}

		bpmTxt.text =
		Std.string(FlxMath.roundDecimal(Conductor.songPosition / 1000, 2)) + " / " + Std.string(FlxMath.roundDecimal(FlxG.sound.music.length / 1000, 2)) +
		"\nSection: " + curSec +
		"\n\nBeat: " + Std.string(curDecBeat).substring(0,4) +
		"\n\nStep: " + curStep;
		if (!mobile)  bpmTxt.text += "\n\nBeat Snap: " + quantization + "th";



		
		var playedSound = [false, false, false, false]; //Prevents ouchy GF sex sounds
		curRenderedNotes.forEachAlive(function(note) {
			note.alpha = 1;
			if(curSelectedNote != null) {
				var noteDataToCheck = note.noteData + (4*note.currentStrum);

				if (curSelectedNote[0] == note.strumTime && ((curSelectedNote[2] == null && noteDataToCheck < 0) || (curSelectedNote[2] != null && curSelectedNote[1] == noteDataToCheck)))
				{
					colorSine += elapsed;
					var colorVal = 0.7 + Math.sin(Math.PI * colorSine) * 0.3;
					note.color = FlxColor.fromRGBFloat(colorVal, colorVal, colorVal, 0.999); //Alpha can't be 100% or the color won't be updated for some reason, guess i will die
				}
			}

			if(note.strumTime <= Conductor.songPosition) {
				note.alpha = 0.4;
				if(note.strumTime > lastConductorPos && FlxG.sound.music.playing && note.noteData > -1) {
					var data = note.noteData % 4;
					var what = note.currentStrum;
					if (note.currentStrum == 1)
						what = 0;
					if (note.currentStrum == 0)
						what = 1;
					var noteDataToCheck = note.noteData + (4*what);
						strumLineNotes.members[noteDataToCheck].playAnim('confirm', true);
						strumLineNotes.members[noteDataToCheck].resetAnim = (note.sustainLength / 1000) + 0.15;
					if(!playedSound[data]) {
						var soundToPlay = 'hitsound';
						var dadsoundToPlay = 'tick';

						if((playSoundBf.checked && note.currentStrum == 0) || (playSoundDad.checked && note.currentStrum == 1) || playSoundExtra.checked){

							if(_song.player1 == 'gf') { //Easter egg
								soundToPlay = 'GF_' + Std.string(data + 1);
								dadsoundToPlay = 'GF_' + Std.string(data + 1);
							}

							if(note.noteType == 'Warning Note') { //Easter egg
								soundToPlay = 'shoot';
								dadsoundToPlay = 'shoot';
							}

							if(note.noteType == 'Static Note') { //Easter egg
								soundToPlay = 'hitStatic1';
								dadsoundToPlay = 'hitStatic1';
							}



                           

							
						}
						
						var sound = new FlxSound();
						   sound.loadEmbedded(Paths.sound(dadsoundToPlay)).pan = if (note.noteData < 4) -0.3 else 0.3; 
						   var chartDD = 1;
                           var chartBF = 0;
						   if (!_song.igorAutoFix){
							if (!_song.notes[curSec].mustHitSection){
								chartDD = 0;
								chartBF = 1;
							}
						   }
						if (playSoundDad.checked && note.currentStrum == chartDD){

							sound.play();
							lilOpp.animation.play("" + (data), true);
						//	playedSound[data] = true;
						   }
						   if (playSoundBf.checked && note.currentStrum == chartBF){

							FlxG.sound.play(Paths.sound(soundToPlay)).pan = if (note.noteData < 4) -0.3 else 0.3; //would be coolio
							lilBf.animation.play("" + (data), true);
						//	playedSound[data] = true;
						   }
						 if (playSoundExtra.checked && note.currentStrum>1){
							switch (note.currentStrum % 2){
								case 0:
							FlxG.sound.play(Paths.sound('hitNoteOpponent'));
							case 1:
							FlxG.sound.play(Paths.sound('hitNotePlayer'));
							}
						 }
						data = note.noteData + 4*note.currentStrum;

					}
				}
			}
		});

		if(metronome.checked && lastConductorPos != Conductor.songPosition) {
			var metroInterval = 60 / metronomeStepper.value;
			var metroStep = Math.floor(((Conductor.songPosition + metronomeOffsetStepper.value) / metroInterval) / 1000);
			var lastMetroStep = Math.floor(((lastConductorPos + metronomeOffsetStepper.value) / metroInterval) / 1000);
			if(metroStep != lastMetroStep) {
				FlxG.sound.play(Paths.sound('Metronome_Tick'));
				//trace('Ticked');
			}
		}
		lastConductorPos = Conductor.songPosition;

	}

	function updateZoom() {
		var daZoom = zoomList[curZoom];
		var zoomThing = '1 / ' + daZoom;
		if(daZoom < 1) zoomThing = Math.round(1 / daZoom) + ' / 1';
		zoomTxt.text = 'Zoom: ' + zoomThing;
		reloadGridLayer();
	}

	/*
	function loadAudioBuffer() {
		if(audioBuffers[0] != null) {
			audioBuffers[0].dispose();
		}
		audioBuffers[0] = null;
		#if MODS_ALLOWED
		if(FileSystem.exists(Paths.modFolders('songs/' + currentSongName + '/Inst.ogg'))) {
			audioBuffers[0] = AudioBuffer.fromFile(Paths.modFolders('songs/' + currentSongName + '/Inst.ogg'));
			//trace('Custom vocals found');
		}
		else { #end
			var leVocals = Paths.getPath(currentSongName + '/Inst.' + Paths.SOUND_EXT, SOUND, 'songs');
			if (OpenFlAssets.exists(leVocals)) { //Vanilla inst
				audioBuffers[0] = AudioBuffer.fromFile('./' + leVocals.substr(6));
				//trace('Inst found');
			}
		#if MODS_ALLOWED
		}
		#end

		if(audioBuffers[1] != null) {
			audioBuffers[1].dispose();
		}
		audioBuffers[1] = null;
		#if MODS_ALLOWED
		if(FileSystem.exists(Paths.modFolders('songs/' + currentSongName + '/Voices.ogg'))) {
			audioBuffers[1] = AudioBuffer.fromFile(Paths.modFolders('songs/' + currentSongName + '/Voices.ogg'));
			//trace('Custom vocals found');
		} else { #end
			var leVocals = Paths.getPath(currentSongName + '/Voices.' + Paths.SOUND_EXT, SOUND, 'songs');
			if (OpenFlAssets.exists(leVocals)) { //Vanilla voices
				audioBuffers[1] = AudioBuffer.fromFile('./' + leVocals.substr(6));
				//trace('Voices found, LETS FUCKING GOOOO');
			}
		#if MODS_ALLOWED
		}
		#end
	}
	*/

	var lastSecBeats = 0;
	var lastSecBeatsNext = 0;
	function reloadGridLayer() {
		gridLayer.clear();
		gridBG = FlxGridOverlay.create(GRID_SIZE, GRID_SIZE, GRID_SIZE * ((curStrums) *4 + 1), Std.int(GRID_SIZE * getSectionBeats(null) * 4 * zoomList[curZoom]));

		if (desktop)
		if(FlixG.save.data.chart_waveformInst || FlixG.save.data.chart_waveformVoices) {
			//updateWaveform();
		}
		

		var leHeight = Std.int(gridBG.height);
		var foundNextSec = false;
		if(sectionStartTime(1) <= FlxG.sound.music.length)
		{
			nextGridBG = FlxGridOverlay.create(GRID_SIZE, GRID_SIZE, GRID_SIZE * ((curStrums) *4 + 1), Std.int(GRID_SIZE * getSectionBeats(curSec + 1) * 4 * zoomList[curZoom]));
			leHeight = Std.int(gridBG.height + nextGridBG.height);
			foundNextSec = true;
		}
		else nextGridBG = new FlxSprite().makeGraphic(1, 1, FlxColor.TRANSPARENT);
		nextGridBG.y = gridBG.height;
		
		gridLayer.add(nextGridBG);
		gridLayer.add(gridBG);

		if(foundNextSec)
		{
			var gridBlack = new FlxSprite(0, gridBG.height).makeGraphic(Std.int(GRID_SIZE * ((curStrums) *4 + 1)), Std.int(nextGridBG.height), FlxColor.BLACK);
			gridBlack.alpha = 0.4;
			gridLayer.add(gridBlack);
		}
        for (i in 1...curStrums){
		var gridBlackLine = new FlxSprite(gridBG.x + gridBG.width - (GRID_SIZE * 4) * i).makeGraphic(2, leHeight, FlxColor.BLACK);
		gridLayer.add(gridBlackLine);
		}
		for (i in 1...4) {
			var beatsep1 = new FlxSprite(gridBG.x, (GRID_SIZE * (4 * curZoom)) * i).makeGraphic(Std.int(gridBG.width), 1, 0x44FF0000);
			if(vortex)
			{
				gridLayer.add(beatsep1);
			}
		}

		var gridBlackLine = new FlxSprite(gridBG.x + GRID_SIZE).makeGraphic(2, leHeight, FlxColor.BLACK);
		gridLayer.add(gridBlackLine);

		if (strumLine != null) remove(strumLine);
		//if (quant != null) remove(quant);
		strumLine = new FlxSprite(0, 50).makeGraphic(Std.int(GRID_SIZE * ((curStrums) *4 + 1)), 4);
		add(strumLine);
        if (quant == null){
		quant = new AttachedSprite('chart_quant','chart_quant');
		quant.animation.addByPrefix('q','chart_quant',0,false);
		quant.animation.play('q', true, false, 0);

		quant.xAdd = -32;
		quant.yAdd = 8;
		add(quant);
		
        }
        quant.sprTracker = strumLine;
		if (strumLineNotes != null)
			{
				strums = [];
				strumLineNotes.clear();
				for (i in 0...curStrums){
					createStrumNotes(i);
				}
			}

		updateGrid();

		lastSecBeats = getSectionBeats(null);
		if(sectionStartTime(1) > FlxG.sound.music.length) lastSecBeatsNext = 0;
		else getSectionBeats(curSec + 1);
	}

	
    
	var waveformPrinted = true;
	var wavData = [[[0], [0]], [[0], [0]]];
	function updateWaveform() {
		if (desktop){
		if(waveformPrinted) {
			waveformSprite.makeGraphic(Std.int(GRID_SIZE * 8), Std.int(gridBG.height), 0x00FFFFFF);
			waveformSprite.pixels.fillRect(new Rectangle(0, 0, gridBG.width, gridBG.height), 0x00FFFFFF);
		}
		waveformPrinted = false;

		if(!FlixG.save.data.chart_waveformInst && !FlixG.save.data.chart_waveformVoices) {
			//trace('Epic fail on the waveform lol');
			return;
		}

		wavData[0][0] = [];
		wavData[0][1] = [];
		wavData[1][0] = [];
		wavData[1][1] = [];

		var steps = Math.round(getSectionBeats(null) * 4);
		var st = sectionStartTime(0);
		var et = st + (Conductor.stepCrochet * steps);

		if (FlixG.save.data.chart_waveformInst) {
			var sound = FlxG.sound.music;
			if (sound._sound != null && sound._sound.__buffer != null) {
				var bufferData = sound._sound.__buffer.data;
			var bytes = dataToBytes(bufferData);
				wavData = waveformData(
                    sound._sound.__buffer,
					bytes,
					st,
					et,
					1,
					wavData,
					Std.int(gridBG.height)
				);
			}
		}

		if (FlixG.save.data.chart_waveformVoices) {
			var sound = vocals.members[curSel];
			if (sound._sound != null && sound._sound.__buffer != null) {
                var bufferData = sound._sound.__buffer.data;
                var bytes = dataToBytes(bufferData);

				wavData = waveformData(
                    sound._sound.__buffer,
					bytes,
					st,
					et,
					1,
					wavData,
					Std.int(gridBG.height)
				);
			}
		}

		// Draws
		var gSize = Std.int(GRID_SIZE * 4);
		var hSize = Std.int(gSize / 2);

		var lmin = 0;
		var lmax = 0;

		var rmin = 0;
		var rmax = 0;

		var size = 1;

        var leftLength = (
			wavData[0][0].length > wavData[0][1].length ? wavData[0][0].length : wavData[0][1].length
		);

		var rightLength = (
			wavData[1][0].length > wavData[1][1].length ? wavData[1][0].length : wavData[1][1].length
		);

		var length = leftLength > rightLength ? leftLength : rightLength;

		var index;
		for (i in 0...length) {
			index = i;

			lmin = FlxMath.bound(((index < wavData[0][0].length && index >= 0) ? wavData[0][0][index] : 0) * (gSize / 1.12), -hSize, hSize) / 2;
			lmax = FlxMath.bound(((index < wavData[0][1].length && index >= 0) ? wavData[0][1][index] : 0) * (gSize / 1.12), -hSize, hSize) / 2;

			rmin = FlxMath.bound(((index < wavData[1][0].length && index >= 0) ? wavData[1][0][index] : 0) * (gSize / 1.12), -hSize, hSize) / 2;
			rmax = FlxMath.bound(((index < wavData[1][1].length && index >= 0) ? wavData[1][1][index] : 0) * (gSize / 1.12), -hSize, hSize) / 2;

			waveformSprite.pixels.fillRect(new Rectangle(hSize - (lmin + rmin), i * size, (lmin + rmin) + (lmax + rmax), size), FlxColor.BLUE);
		}
		
		waveformPrinted = true;
    }
	}

	function waveformData(buffer, bytes, time, endTime, multiply, array, steps)
	{
		if (canSPAWNWAVE){
		if (buffer == null || buffer.data == null) return [[[0], [0]], [[0], [0]]];

		var khz = (buffer.sampleRate / 1000);
		var channels = buffer.channels;

		var index = Std.int(time * khz);

		var samples = ((endTime - time) * khz);

		if (steps == null) steps = 1280;

		var samplesPerRow = samples / steps;
		var samplesPerRowI = Std.int(samplesPerRow);

		var gotIndex = 0;

		var lmin = 0;
		var lmax = 0;

		var rmin = 0;
		var rmax = 0;

		var rows = 0;

		var simpleSample = true;//samples > 17200;
		var v1 = false;

		if (array == null) array = [[[0], [0]], [[0], [0]]];

		while (index < (bytes.length - 1)) {
			if (index >= 0) {
				var byte = bytes.getUInt16(index * channels * 2);

				if (byte > 65535 / 2) byte -= 65535;

				var sample = (byte / 65535);

				if (sample > 0) {
					if (sample > lmax) lmax = sample;
				} else if (sample < 0) {
					if (sample < lmin) lmin = sample;
				}

				if (channels >= 2) {
					byte = bytes.getUInt16((index * channels * 2) + 2);

					if (byte > 65535 / 2) byte -= 65535;

					sample = (byte / 65535);

					if (sample > 0) {
						if (sample > rmax) rmax = sample;
					} else if (sample < 0) {
						if (sample < rmin) rmin = sample;
					}
				}
			}

            v1 = samplesPerRowI > 0 ? (index % samplesPerRowI == 0) : false;
			while (simpleSample ? v1 : rows >= samplesPerRow) {
				v1 = false;
				rows -= samplesPerRow;

				gotIndex++;

				var lRMin = Math.abs(lmin) * multiply;
				var lRMax = lmax * multiply;

				var rRMin = Math.abs(rmin) * multiply;
				var rRMax = rmax * multiply;

				if (gotIndex > array[0][0].length) array[0][0].push(lRMin);
					else array[0][0][gotIndex - 1] = array[0][0][gotIndex - 1] + lRMin;

				if (gotIndex > array[0][1].length) array[0][1].push(lRMax);
					else array[0][1][gotIndex - 1] = array[0][1][gotIndex - 1] + lRMax;

				if (channels >= 2) {
					if (gotIndex > array[1][0].length) array[1][0].push(rRMin);
						else array[1][0][gotIndex - 1] = array[1][0][gotIndex - 1] + rRMin;

					if (gotIndex > array[1][1].length) array[1][1].push(rRMax);
						else array[1][1][gotIndex - 1] = array[1][1][gotIndex - 1] + rRMax;
				}
				else {
					if (gotIndex > array[1][0].length) array[1][0].push(lRMin);
						else array[1][0][gotIndex - 1] = array[1][0][gotIndex - 1] + lRMin;

					if (gotIndex > array[1][1].length) array[1][1].push(lRMax);
						else array[1][1][gotIndex - 1] = array[1][1][gotIndex - 1] + lRMax;
				}

				lmin = 0;
				lmax = 0;

				rmin = 0;
				rmax = 0;
			}

			index++;
			rows++;
			if(gotIndex > steps) break;
		}

		return array;
    }else
		return [[[0], [0]], [[0], [0]]];

	}

	function changeNoteSustain(value)
	{
		if (curSelectedNote != null)
		{
			if (curSelectedNote[2] != null)
			{
				curSelectedNote[2] += value;
				curSelectedNote[2] = Math.max(curSelectedNote[2], 0);
			}
		}

		updateNoteUI();
		updateGrid();
	}
	function createStrumNotes(strum){
		var strumNotes = new FlxTypedGroup();
		for (i in 0...4){
			var note = new StrumNote(GRID_SIZE * (i+1+(4*strum)), strumLine.y, i % 4, 0);
			note.setGraphicSize(GRID_SIZE, GRID_SIZE);
			note.updateHitbox();
			note.playAnim('static', true);
			strumNotes.add(note);
			strumLineNotes.add(note);
			note.scrollFactor.set(1, 1);
		}
		strums.push(strumNotes);
	}
	function removeStrumNotes(strum = 0){
		var strum = strums[strum];
		strums.remove(strum);
	}
	function toggleNoteAnim() {
		if (curSelectedNote != null) {
			if (curSelectedNote[3] != null) {
				curSelectedNote[3] = if (curSelectedNote[3] == 1) 0 else 1;

			} else {
				curSelectedNote[3] = 1;
			}
		}
		updateNoteUI();
	}
	function recalculateSteps(add)
	{
		var lastChange = {
			stepTime: 0,
			songTime: 0,
			bpm: 0
		}
		for (i in 0...Conductor.bpmChangeMap.length)
		{
			if (FlxG.sound.music.time > Conductor.bpmChangeMap[i].songTime)
				lastChange = Conductor.bpmChangeMap[i];
		}

		curStep = lastChange.stepTime + Math.floor((FlxG.sound.music.time - lastChange.songTime + add) / Conductor.stepCrochet);
		updateBeat();

		return curStep;
	}

	function resetSection(songBeginning)
	{
		updateGrid();

		FlxG.sound.music.pause();
		// Basically old shit from changeSection???
		FlxG.sound.music.time = sectionStartTime(0);

		lilBf.animation.play("idle");
		lilOpp.animation.play("idle");

		if (songBeginning)
		{
			FlxG.sound.music.time = 0;
			curSec = 0;
		}

		if(vocals != null) {
			vocals.pause();
			vocals.time = FlxG.sound.music.time;
		}
		if(sfx != null) {
			sfx.pause();
			sfx.time = FlxG.sound.music.time;
		}
		updateCurStep();

		updateGrid();
		updateSectionUI();
		//updateWaveform();
	}

	function changeSection(sec, updateMusic )
	{
		if (_song.notes[sec] != null)
		{
			curSec = sec;
			if (updateMusic)
			{
				FlxG.sound.music.pause();

				FlxG.sound.music.time = sectionStartTime(0);
				if(vocals != null) {
					vocals.pause();
					vocals.time = FlxG.sound.music.time;
				}
				if(sfx != null) {
					sfx.pause();
					sfx.time = FlxG.sound.music.time;
				}
				lilBf.animation.play("idle");
				lilOpp.animation.play("idle");
				updateCurStep();
			}
			waveformSprite.y = 0 -gridBG.height * curSec;
			var blah1 = getSectionBeats(curSec);
			var blah2 = getSectionBeats(curSec + 1);
			if(sectionStartTime(1) > FlxG.sound.music.length) blah2 = 0;
	
			if(blah1 != lastSecBeats || blah2 != lastSecBeatsNext)
			{
				reloadGridLayer();
			}
			else
			{
				updateGrid();
			}
			updateSectionUI();
		}
		else
		{
			changeSection(0,true);
		}
		Conductor.songPosition = FlxG.sound.music.time;
		//updateWaveform();
	}

	function updateSectionUI()
	{
		var sec = _song.notes[curSec];

		stepperBeats.value = getSectionBeats(null);
		check_mustHitSection.checked = sec.mustHitSection;
		check_gfSection.checked = sec.gfSection;

		if (sec.altAnimNum == null) {
			sec.altAnimNum == if (sec.altAnim) 1 else 0;
		}
		stepperAltAnim.value = sec.altAnimNum;

		check_changeBPM.checked = sec.changeBPM;
		stepperSectionBPM.value = sec.bpm;

		updateHeads();
	}

	function updateHeads()
	{
		var healthIconP1 = loadHealthIconFromCharacter(_song.player1);
		var healthIconP2 = loadHealthIconFromCharacter(_song.player2);

		leftIcon.changeIcon(healthIconP2);
		rightIcon.changeIcon(healthIconP1);
			if (_song.notes[curSec].gfSection) leftIcon.changeIcon('gf');
		if (!_song.notes[curSec].mustHitSection)
		{
			camIcon.changeIcon('dad');
			if (!_song.igorAutoFix)
			{
				leftIcon.changeIcon(healthIconP1);
				rightIcon.changeIcon(healthIconP2);
			}
	    }
		else 
		{
			if (!_song.igorAutoFix){
				leftIcon.changeIcon(healthIconP2);
			rightIcon.changeIcon(healthIconP1);
			}
			camIcon.changeIcon('bf');
		}
		if (_song.notes[curSec].gfSection)  camIcon.changeIcon('gf');
	}

	function loadHealthIconFromCharacter(char) {
		var characterPath = 'characters/' + char + '.json';
        var path = Paths.getPreloadPath(characterPath);
	if (modsAllow){
		path = Paths.modFolders(characterPath);
		if (!FileSystem.exists(path)) {
			path = SUtil.getPath() + Paths.getPreloadPath(characterPath);
		}

		if (!FileSystem.exists(path))
            {
                path = SUtil.getPath() + Paths.getPreloadPath('characters/' + Character.DEFAULT_CHARACTER + '.json'); //If a character couldn't be found, change him to BF just to prevent a crash
            }
    }else{
		
		if (!OpenFlAssets.exists(path))
            {
                path = SUtil.getPath() + Paths.getPreloadPath('characters/' + Character.DEFAULT_CHARACTER + '.json'); //If a character couldn't be found, change him to BF just to prevent a crash
            }
		}
		
        var rawJson = FNFAssets.getText(path);
		if (!modsAllow)
		rawJson = OpenFlAssets.getText(path);
		

		var json =  CoolUtil.parseJson(rawJson);
		return json.healthicon;
	}

	function updateNoteUI()
	{
		if (curSelectedNote != null) {
			if(curSelectedNote[2] != null) {
				stepperSusLength.value = curSelectedNote[2];

				isAltNoteCheck.checked =  curSelectedNote[4];
			stepperAltNote.value = if (curSelectedNote[4] != null ) curSelectedNote[4] else 0;

				if(curSelectedNote[3] != null && curSelectedNote.length <= 3) {
					currentType = noteTypeMap.get(curSelectedNote[3]);
					if(currentType <= 0) {
						noteTypeDropDown.selectedLabel = '';
					} else {
						noteTypeDropDown.selectedLabel = currentType + '. ' + curSelectedNote[3];
					}
				}
			} else {
				eventDropDown.selectedLabel = curSelectedNote[1][curEventSelected][0];
				var selected = Std.parseInt(eventDropDown.selectedId);
				if(selected > 0 && selected < eventStuff.length) {
					descText.text = eventStuff[selected][1];
				}
				value1InputText.text = curSelectedNote[1][curEventSelected][1];
				value2InputText.text = curSelectedNote[1][curEventSelected][2];
				value3InputText.text = curSelectedNote[1][curEventSelected][3];
			}
			strumTimeInputText.text = '' + curSelectedNote[0];
		}
	}

	function updateGrid()
	{
        	
	while (curRenderedNotes.members.length > 0)
        {
            curRenderedNotes.remove(curRenderedNotes.members[0], true);
        }
    
        while (curRenderedSustains.members.length > 0)
        {
            curRenderedSustains.remove(curRenderedSustains.members[0], true);
        }
    
        while (curRenderedNoteType.members.length > 0)
        {
            curRenderedNoteType.remove(curRenderedNoteType.members[0], true);
        }
        
        while (nextRenderedNotes.members.length > 0)
            {
                nextRenderedNotes.remove(nextRenderedNotes.members[0], true);
            }
        
            while (nextRenderedSustains.members.length > 0)
            {
                nextRenderedSustains.remove(nextRenderedSustains.members[0], true);
            }
            
	
		if (_song.notes[curSec].changeBPM && _song.notes[curSec].bpm > 0)
		{
			Conductor.changeBPM(_song.notes[curSec].bpm);
			//trace('BPM of this section:');
		}
		else
		{
			// get last bpm
			var daBPM = _song.bpm;
			for (i in 0...curSec)
				if (_song.notes[i].changeBPM)
					daBPM = _song.notes[i].bpm;
			Conductor.changeBPM(daBPM);
		}

		// CURRENT SECTION
		
		var startThing = sectionStartTime(0);
		var endThing = sectionStartTime(1);

		var beats = getSectionBeats(null);
		for (i in notes)
		{
			if(i[0] >= startThing && i[0] < endThing)
				{
					if (i[0] != endThing){
			var note = setupNoteData(i, false);
			curRenderedNotes.add(note);
			if (note.sustainLength > 0)
			{
				curRenderedSustains.add(setupSusNote(note, beats));
			}

			if(i[3] != null && note.noteType != null && note.noteType.length > 0) {
				var typeInt = noteTypeMap.get(i[3]);
				var theType = '' + typeInt;
				if(typeInt == null) theType = '?';

				var daText = new AttachedFlxText(0, 0, 100, theType, 24);
				daText.setFormat(Paths.font("vcr.ttf"), 24, FlxColor.WHITE, CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
				daText.xAdd = -32;
				daText.yAdd = 6;
				daText.borderSize = 1;
				curRenderedNoteType.add(daText);
				daText.sprTracker = note;
			}
			note.mustPress = if (note.currentStrum == 0) true else false;
		}
	}
		}

		// CURRENT EVENTS
		for (i in _song.events)
		{
			if(i[0] >= startThing &&  i[0] < endThing)
			{
				var note = setupNoteData(i, false);
				curRenderedNotes.add(note);

				var text = 'Event: ' + note.eventName + ' (' + Math.floor(note.strumTime) + ' ms)' 
				+ '\nValue 1: ' + note.eventVal1 
				+ '\nValue 2: ' + note.eventVal2
				+ '\nValue 3: ' + note.eventVal3;
				if(note.eventLength > 1) text = note.eventLength + ' Events:\n' + note.eventName;

				var daText = new AttachedFlxText(0, 0, 400, text, 8);
				daText.setFormat(Paths.font("vcr.ttf"), 8, FlxColor.WHITE, RIGHT, FlxTextBorderStyle.OUTLINE_FAST, FlxColor.BLACK);
				daText.xAdd = -410;
				daText.borderSize = 1;
				if(note.eventLength > 1) daText.yAdd += 8;
				curRenderedNoteType.add(daText);
				daText.sprTracker = note;
				//trace('test: ' + i[0], 'startThing: ' + startThing, 'endThing: ' + endThing);
			}
		}

		var startThing2 = sectionStartTime(1);
		var endThing2 = sectionStartTime(2);

		// NEXT SECTION
		var beats = getSectionBeats(1);
		
			for (i in notes)
			{
				if (i[0] != endThing){
				if(i[0] >= startThing2 &&  i[0] < endThing2)
					{
				var note = setupNoteData(i, true);
				note.alpha = 0.6;
				nextRenderedNotes.add(note);
				if (note.sustainLength > 0)
				{
					nextRenderedSustains.add(setupSusNote(note, beats));
				}
			}
		}
			}
		

		// NEXT EVENTS
		for (i in _song.events)
		{
			if(i[0] >= startThing2 &&  i[0] < endThing2)
			{
				var note = setupNoteData(i, true);
				note.alpha = 0.6;
				nextRenderedNotes.add(note);
			}
		}
	}

	function setupNoteData(i, isNextSection)
	{
		var daNoteInfo = i[1];
		var daStrumTime = i[0];
		var daSus = i[2];
        var danoteStrum = Math.floor(daNoteInfo / Note.NOTE_AMOUNT);

		var note = new Note(daStrumTime, daNoteInfo, null, null, true);
		note.currentStrum = danoteStrum;
		if(daSus != null) { //Common note
			if(!Std.isOfType(i[3], String)  && i.length <= 3) //Convert old note type to new note type format
			{
				i[3] = noteTypeIntMap.get(i[3]);
			}
			if(i.length > 3 && (i[3] == null || i[3].length < 1)  && i.length <= 3)
			{
				i.remove(i[3]);
			}
			note.sustainLength = daSus;
			note.noteType = i[3];
		} else { //Event note
			note.loadGraphic(Paths.image('eventArrow'));
			note.eventName = getEventName(i[1]);
			note.eventLength = i[1].length;
			if(i[1].length < 3)
			{
				note.eventVal1 = i[1][0][1];
				note.eventVal2 = i[1][0][2];
				note.eventVal3 = i[1][0][3];
			}
			note.noteData = -1;
			daNoteInfo = -1;
		}

		note.setGraphicSize(GRID_SIZE, GRID_SIZE);
		note.updateHitbox();
		var noteS = danoteStrum;
		if (danoteStrum == 0)
			noteS = 1;
		if (danoteStrum == 1)
			noteS = 0;
		
		if (daNoteInfo <= -1)
			noteS = 0;
		note.x = Math.floor(((daNoteInfo % Note.NOTE_AMOUNT) + 4*noteS) * GRID_SIZE) + GRID_SIZE;
		

		var beats = getSectionBeats(if (isNextSection)  1 else 0);
		note.y = getYfromStrumNotes(daStrumTime - sectionStartTime(0), beats);
		//if(isNextSection) note.y += gridBG.height;
		if(note.y < -150) note.y = -150;
		return note;
	}

	function getEventName(names)
	{
		var retStr = '';
		var addedOne = false;
		for (i in 0...names.length)
		{
			if(addedOne) retStr += ', ';
			retStr += names[i][0];
			addedOne = true;
		}
		return retStr;
	}

	function setupSusNote(note, beats) {
		var height = Math.floor(FlxMath.remapToRange(note.sustainLength, 0, Conductor.stepCrochet * 16, 0, GRID_SIZE * 16 * zoomList[curZoom]) + (GRID_SIZE * zoomList[curZoom]) - GRID_SIZE / 2);
		var minHeight = Std.int((GRID_SIZE * zoomList[curZoom] / 2) + GRID_SIZE / 2);
		if(height < minHeight) height = minHeight;
		if(height < 1) height = 1; //Prevents error of invalid height

		var spr = new FlxSprite(note.x + (GRID_SIZE * 0.5) - 4, note.y + GRID_SIZE / 2).makeGraphic(8, height);
		return spr;
	}

	function addSection(sectionBeats)
	{
		var sec = {
			sectionBeats: sectionBeats,
			bpm: _song.bpm,
			changeBPM: false,
			mustHitSection: true,
			gfSection: false,
			sectionNotes: [],
			typeOfSection: 0,
			altAnim: false,
			altAnimNum: 0,
		crossfadeBf: false,
		crossfadeDad: false
		};

		_song.notes.push(sec);
	}

	function selectNote(note)
	{
		var noteDataToCheck = note.noteData + (4*note.currentStrum);

		if(noteDataToCheck > -1)
		{

			for (i in notes)
			{
				if (i != curSelectedNote && i.length > 2 && i[0] == note.strumTime && i[1] == noteDataToCheck)
				{
					curSelectedNote = i;
					break;
				}
			}
		}
		else
		{
			for (i in _song.events)
			{
				if(i != curSelectedNote && i[0] == note.strumTime)
				{
					curSelectedNote = i;
					curEventSelected = Std.int(curSelectedNote[1].length) - 1;
					changeEventSelected();
					break;
				}
			}
		}

		updateGrid();
		updateNoteUI();
	}

	function deleteNote(note)
	{
		var noteDataToCheck = note.noteData + (4*note.currentStrum);

		if(note.noteData > -1) //Normal Notes
		{
			for (i in notes)
			{
				if (i[0] == note.strumTime && i[1] % 4 == noteDataToCheck % 4)
				{
					if(i == curSelectedNote) curSelectedNote = null;
					//FlixG.log.add('FOUND EVIL NOTE');
					notes.remove(i);
					for (sec in _song.notes){
						if(sec.sectionNotes.contains(i))
						sec.sectionNotes.remove(i);
					}
					break;
				}
			}
		}
		else //Events
		{
			for (i in _song.events)
			{
				if(i[0] == note.strumTime)
				{
					if(i == curSelectedNote)
					{
						curSelectedNote = null;
						changeEventSelected();
					}
					//FlixG.log.add('FOUND EVIL EVENT');
					_song.events.remove(i);
					break;
				}
			}
		}

		updateGrid();
	}

	function doANoteThing(cs, d, style){
		var delnote = false;
		if(strumLineNotes.members[d].overlaps(curRenderedNotes))
		{
			curRenderedNotes.forEachAlive(function(note)
			{
				if (note.overlapsPoint(new FlxPoint(strumLineNotes.members[d].x + 1,strumLine.y+1)) && note.noteData == d%4)
				{
						//trace('tryin to delete note...');
						if(!delnote) deleteNote(note);
						delnote = true;
				}
			});
		}

		if (!delnote){
			addNote(cs, d, style);
		}
	}

	function clearSong()
	{
		for (daSection in 0..._song.notes.length)
		{
			_song.notes[daSection].sectionNotes = [];
		}
        notes = [];
		updateGrid();
	}
	function changeNoteType(noteType1,noteType2)
		{

				for (i in notes){
				if (i[3] == noteType1){
					i[3] = noteType2;
				}
			}
		
		updateGrid();
	}
	
	function addNote(strum, data, type)
	{
		//curUndoIndex++;
		//var newsong = _song.notes;
		//	undos.push(newsong);
		var noteStrum = getStrumTime(dummyArrow.y, false) + sectionStartTime(0);
		var noteData = Math.floor((FlixG.mouse.x - GRID_SIZE) / GRID_SIZE);
		var noteSus = 0;
		var daAlt = false;
		var daType = currentType;
        var noteStrumPlay = Math.floor(noteData/4);
		if (strum != null) noteStrum = strum;
		if (data != null) noteData = data;
		if (type != null) daType = type;
		
		var noteS = noteStrumPlay;
		if(noteData > -1){
		if (noteStrumPlay == 0)
			{
             noteData += 4;
			}
		if (noteStrumPlay == 1)
			{
				noteData -= 4;
			}
		}

		if(noteData > -1)
		{
			var note = [noteStrum, noteData, noteSus, noteTypeIntMap.get(daType)];
			notes.push(note);
			_song.notes[curSec].sectionNotes.push(note);
			curSelectedNote = note;
			trace(note);
		}
		else
		{
			var event = eventStuff[Std.parseInt(eventDropDown.selectedId)][0];
			var text1 = value1InputText.text;
			var text2 = value2InputText.text;
			var text3 = value3InputText.text;
			_song.events.push([noteStrum, [[event, text1, text2, text3]]]);
			curSelectedNote = _song.events[_song.events.length - 1];
			curEventSelected = 0;
			changeEventSelected();
		}

		if (FlxG.keys.pressed.CONTROL && noteData > -1)
		{
			var note  =[noteStrum, (noteData + 4) % 8, noteSus, noteTypeIntMap.get(daType)];
			notes.push(note);
			_song.notes[curSec].sectionNotes.push(note);

		}

		//trace(noteData + ', ' + noteStrum + ', ' + curSec);
		strumTimeInputText.text = '' + curSelectedNote[0];

		updateGrid();
		updateNoteUI();
	}

	// will figure this out l8r
	function redo()
	{
		//_song = redos[curRedoIndex];
	}

	function undo()
	{
		//redos.push(_song);
		undos.pop();
		//_song.notes = undos[undos.length - 1];
		///trace(_song.notes);
		//updateGrid();
	}

	function getStrumTime(yPos, doZoomCalc)
	{
		var leZoom = zoomList[curZoom];
		if(!doZoomCalc) leZoom = 1;
		return FlxMath.remapToRange(yPos, gridBG.y, gridBG.y + gridBG.height * leZoom, 0, 16 * Conductor.stepCrochet);
	}

	function strumLineUpdateY()
		{
			strumLine.y = getYfromStrum((Conductor.songPosition - sectionStartTime(0)) / zoomList[curZoom] % (Conductor.stepCrochet * 16),true) / (getSectionBeats(null) / 4);
		}
		function waveFormUpdateY()
			{
				var leZoom = zoomList[curZoom];

				return -((Conductor.songPosition - sectionStartTime(0)) / zoomList[curZoom] % (Conductor.stepCrochet * 16) - 16 * Conductor.stepCrochet) * ((gridBG.y + theLastStep * leZoom - gridBG.y) / (16 * Conductor.stepCrochet - 0)) / (getSectionBeats(null) / 4);
			}
			
	function getYfromStrum(strumTime, doZoomCalc)
	{
		var leZoom = zoomList[curZoom];
		if(!doZoomCalc) leZoom = 1;
		return FlxMath.remapToRange(strumTime, 0, 16 * Conductor.stepCrochet, gridBG.y, gridBG.y + gridBG.height * leZoom);
	}
	
	function getYfromStrumNotes(strumTime, beats)
	{
		var value = strumTime / (beats * 4 * Conductor.stepCrochet);
		return GRID_SIZE * beats * 4 * zoomList[curZoom] * value + gridBG.y;
	}

	function getNotes()
	{
		var noteData = [];

		for (i in _song.notes)
		{
			noteData.push(i.sectionNotes);
		}

		return noteData;
	}

	function loadJson(song)
	{
		//shitty null fix, i fucking hate it when this happens
		//make it look sexier if possible
		if (CoolUtil.difficulties[PlayState.storyDifficulty] != CoolUtil.defaultDifficulty) {
			if(CoolUtil.difficulties[PlayState.storyDifficulty] == null){
				PlayState.SONG = Song.loadFromNewJson(song.toLowerCase(), song.toLowerCase());
			}else{
				PlayState.SONG = Song.loadFromNewJson(song.toLowerCase(), song.toLowerCase(),CoolUtil.difficulties[PlayState.storyDifficulty]);
			}
		}else{
		PlayState.SONG = Song.loadFromNewJson(song.toLowerCase(), song.toLowerCase());
		}
		MusicBeatState.resetState();
	}

	function autosaveSong()
	{
		FlixG.save.data.autosave = CoolUtil.stringifyJson({
			"song": _song
		});
		FlixG.save.flush();
	}

	function clearEvents() {
		_song.events = [];
		updateGrid();
	}

	function saveLevel()
	{
		_song.events.sort(sortByTime);
		var json = {
			"song": _song
		};

		var data = CoolUtil.stringifyJson(json);

		if ((data != null) && (data.length > 0))
		{
            if (mobile){
                SUtil.saveContent(Paths.formatToSongPath(_song.song), StringTools.trim(data), ".json");
                }else{
                    FNFAssets.askToSave(Paths.formatToSongPath(_song.song) + ".json", StringTools.trim(data));
                }


		}
	}

	function sortByTime(Obj1, Obj2)
	{
		return FlxSort.byValues(FlxSort.ASCENDING, Obj1[0], Obj2[0]);
	}

	 function saveEvents()
	{
		_song.events.sort(sortByTime);
		var eventsSong = {
			events: _song.events
		};
		var json = {
			"song": eventsSong
		}

		var data = Json.stringify(json, "\t");

		if ((data != null) && (data.length > 0))
		{
			if (mobile){
			SUtil.saveContent("events", StringTools.trim(data), ".json");
            }else{
                FNFAssets.askToSave("events.json", StringTools.trim(data));
			}
		}
	}

	function getSectionBeats(section)
	{
		if (section == null) section = curSec;
		var val = null;
		
		if(_song.notes[section] != null) val = _song.notes[section].sectionBeats;
        return val != null ? val : 4;
	}

