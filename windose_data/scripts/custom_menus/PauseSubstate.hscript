var grpMenuShit;
var grpMenuShit2;
var difficultyChoices = [];
var menuItemsOG = ['Resume', 'Restart Song', 'Change Difficulty', 'Change Options', 'Exit to menu'];

var curSelected = 0;
var curTime = Math.max(0, Conductor.songPosition);

var pauseMusic;
var practiceText;
var botText;
var skipTimeText;
var skipTimeTracker;
var tweenStuff;
var storyDifficultyTextCh = '';
var font = 'vcr.ttf';
var songCharterMap = new Map();
var theChartThatIcreated = [];
function create() 
{

	addHaxeLibrary('ChartingState','editors');
	addHaxeLibrary('OptionsState','options');
	addHaxeLibrary('FlxMath','flixel.math');
	//storyDifficultyTextCh = funnidiff[PlayState.storyDifficulty];
    if(CoolUtil.difficulties.length < 2) menuItemsOG.remove('Change Difficulty'); //No need to change difficulty if there is only one!
	var num = 0;
	
	if(!PlayState.instance.startingSong && PlayState.chartingMode)
	{
		num = 1;
		menuItemsOG.insert(3, 'Skip Time');
	}
    if(PlayState.chartingMode)
    {
        menuItemsOG.insert(2, 'Leave Charting Mode');
        
    
    
       

        menuItemsOG.insert(3 + num, 'End Song');
        menuItemsOG.insert(4 + num, 'Toggle Practice Mode');
        menuItemsOG.insert(5 + num, 'Toggle Botplay');
		
    }
	if (mobile)
		menuItemsOG.insert(menuItemsOG.length - 2 + num, 'Chart Editor');
    menuItems = menuItemsOG;


	for (i in 0...CoolUtil.difficulties.length) {
        var diff = '' + CoolUtil.difficulties[i];
        difficultyChoices.push(diff);
    }
    difficultyChoices.push('BACK');


    pauseMusic = new FlxSound();
    if(songName != null) {
        pauseMusic.loadEmbedded(Paths.music(songName), true, true);
    } else if (songName != 'None') {
        pauseMusic.loadEmbedded(Paths.music(Paths.formatToSongPath(ClientPrefs.pauseMusic)), true, true);
    }
    pauseMusic.volume = 0;
    pauseMusic.play(false, FlixG.random.int(0, Std.int(pauseMusic.length / 2)));

    FlixG.sound.list.add(pauseMusic);

    var bg = new FlxSprite().makeGraphic(FlxG.width, FlxG.height, BlackColor);
    bg.alpha = 0;
    bg.scrollFactor.set();
    add(bg);

	
    if(ClientPrefs.langType == 'Chinese')
        font = 'DinkieBitmap-9px.ttf';

    var levelInfo = new FlxText(20, 15, 0, "", 32);
	if(ClientPrefs.langType == 'English')
    levelInfo.text += PlayState.SONG.song;
	else if(ClientPrefs.langType == 'Chinese')
	levelInfo.text += PlayState.SONG.songNameChinese;	
	
    levelInfo.scrollFactor.set();
    levelInfo.setFormat(Paths.font(font), 32);
    levelInfo.updateHitbox();
    add(levelInfo);

	var artist = new FlxText(20, levelInfo.y + 32, 0, "Artist: ", 32);
	if(ClientPrefs.langType == 'Chinese'){
		artist.text = '曲师: ';
	}
	artist.text += PlayState.SONG.composer;
    artist.scrollFactor.set();
    artist.setFormat(Paths.font(font), 32);
    artist.updateHitbox();
    add(artist);

	var charter = new FlxText(20, artist.y + 32, 0, "Charter: ", 32);
	if(ClientPrefs.langType == 'Chinese'){
		charter.text = '谱师: ';
	}
	var t =  '';
    if (Reflect.hasField(PlayState.SONG,charter))t = Reflect.getProperty(PlayState.SONG,charter)
	else if (songCharterMap.exists(Paths.formatToSongPath(PlayState.SONG.song.toLowerCase())))t = songCharterMap.get(Paths.formatToSongPath(PlayState.SONG.song.toLowerCase()));
	else t = 'unknown';
	charter.text += t;
    charter.scrollFactor.set();
    charter.setFormat(Paths.font(font), 32);
    charter.updateHitbox();
    add(charter);

    var levelDifficulty = new FlxText(20, charter.y + 32, 0, "Difficulty: ", 32);
	levelDifficulty.text += CoolUtil.difficultyString();

    levelDifficulty.scrollFactor.set();
    levelDifficulty.setFormat(Paths.font(font), 32);
    levelDifficulty.updateHitbox();
    add(levelDifficulty);

    var blueballedTxt = new FlxText(20, levelDifficulty.y + 32, 0, "", 32);
	if(ClientPrefs.langType == 'English')
		blueballedTxt.text = "Deaths: " + PlayState.deathCounter;
		else if(ClientPrefs.langType == 'Chinese')
		blueballedTxt.text = "死亡次数: " + PlayState.deathCounter;	

    blueballedTxt.scrollFactor.set();
    blueballedTxt.setFormat(Paths.font(font), 32);
    blueballedTxt.updateHitbox();
    add(blueballedTxt);

    practiceText = new FlxText(20, blueballedTxt.y + 37, 0, "PRACTICE MODE", 32);
    practiceText.scrollFactor.set();
	if(ClientPrefs.langType == 'Chinese')
		practiceText.text = "练习模式";	
    practiceText.setFormat(Paths.font(font), 32);
    practiceText.x = FlxG.width - (practiceText.width + 20);
    practiceText.updateHitbox();
    practiceText.visible = PlayState.instance.practiceMode;
    add(practiceText);

    var chartingText = new FlxText(20, 15 + 101, 0, "CHARTING MODE", 32);
    chartingText.scrollFactor.set();
    chartingText.setFormat(Paths.font(font), 32);
    chartingText.x = FlxG.width - (chartingText.width + 20);
    chartingText.y = FlxG.height - (chartingText.height + 20);
    chartingText.updateHitbox();
    chartingText.visible = PlayState.chartingMode;
	if(ClientPrefs.langType == 'Chinese'){
		chartingText.text = "制谱模式";	
		chartingText.x += 100;
		}
    add(chartingText);

    botText = new FlxText(20, 15 + 101, 0, "BOT PLAY", 32);
    botText.scrollFactor.set();
    botText.setFormat(Paths.font(font), 32);
    botText.x = FlxG.width - (botText.width + 20);
    botText.y = chartingText.y - chartingText.height;
    botText.updateHitbox();
    botText.visible = PlayState.instance.botplay;
	if(ClientPrefs.langType == 'Chinese')
		botText.text = "自动打谱";	
    add(botText);

    blueballedTxt.alpha = 0;
    levelDifficulty.alpha = 0;
    levelInfo.alpha = 0;
	artist.alpha = 0;
	charter.alpha = 0;
    levelInfo.x = FlxG.width - (levelInfo.width + 20);
	artist.x = FlxG.width - (artist.width + 20);
	charter.x = FlxG.width - (charter.width + 20);
    levelDifficulty.x = FlxG.width - (levelDifficulty.width + 20);
    blueballedTxt.x = FlxG.width - (blueballedTxt.width + 20);
	
    FlxTween.tween(bg, {alpha: 0.6}, 0.4, {ease: FlxEase.quartInOut});
    FlxTween.tween(levelInfo, {alpha: 1, y: 20}, 0.4, {ease: FlxEase.quartInOut, startDelay: 0.3});
	FlxTween.tween(artist, {alpha: 1, y: artist.y+5}, 0.4, {ease: FlxEase.quartInOut, startDelay: 0.5});
	FlxTween.tween(charter, {alpha: 1, y: charter.y+5}, 0.4, {ease: FlxEase.quartInOut, startDelay: 0.7});
    FlxTween.tween(levelDifficulty, {alpha: 1, y: levelDifficulty.y + 5}, 0.4, {ease: FlxEase.quartInOut, startDelay: 0.9});
    FlxTween.tween(blueballedTxt, {alpha: 1, y: blueballedTxt.y + 5}, 0.4, {ease: FlxEase.quartInOut, startDelay: 1.1});


	grpMenuShit = new FlxGroup();
	add(grpMenuShit);

	for (i in 0...menuItems.length)
	{
		var songText = new Alphabet(0, (70 * i) + 30, menuItems[i], true, false);
		songText.isMenuItem = true;
		songText.targetY = i;
		grpMenuShit.add(songText);

		
	}
	
	regenMenu();

	setCameras();
	if (mobile){

	if (PlayState.chartingMode)
	{
			addVirtualPads('full', 'a');
	}
	else
	{
		addVirtualPads('up_down', 'a');
	}
	addPadcam();
	}
}
var holdTime = 0;
var cantUnpause = 0.1;

var desaturateAmount = 1.0;
var distortionTime = 0.0;
var desaturateAmplitude = 0.05;
var frequency = 5;
function update(elapsed)
{

    cantUnpause -= elapsed;
    if (pauseMusic.volume < 0.5)
        pauseMusic.volume += 0.01 * elapsed;
    updateSkipTextStuff();

    var upP = controls.UI_UP_P;
    var downP = controls.UI_DOWN_P;
    var accepted = controls.ACCEPT;

	if (upP)
	{
		changeSelection(-1);
	}
	if (downP)
	{
		changeSelection(1);
	}


		var daSelected = menuItems[curSelected];
		switch (daSelected)
		{
			case 'Chart Editor':
				MusicBeatState.switchState(new ChartingState());
				PlayState.chartingMode = true;
			case 'Skip Time':
				if (controls.UI_LEFT_P)
				{
					FlixG.sound.play(Paths.sound('scrollMenu'), 0.4);
					curTime -= 1000;
					holdTime = 0;
				}
				if (controls.UI_RIGHT_P)
				{
					FlixG.sound.play(Paths.sound('scrollMenu'), 0.4);
					curTime += 1000;
					holdTime = 0;
				}

				if(controls.UI_LEFT || controls.UI_RIGHT)
				{
					holdTime += elapsed;
					if(holdTime > 0.5)
					{
                        var funni = 1;
                        if (controls.UI_LEFT)
                            funni = -1;
						curTime += 45000 * elapsed * funni;
					}

					if(curTime >= FlixG.sound.music.length) curTime -= FlixG.sound.music.length;
					else if(curTime < 0) curTime += FlixG.sound.music.length;
					updateSkipTimeText();
				}
		}

		if (accepted && (cantUnpause <= 0 || !ClientPrefs.controllerMode))
		{
			if (menuItems == difficultyChoices)
			{
				if(menuItems.length - 1 != curSelected && difficultyChoices.contains(daSelected)) {
					var name = PlayState.SONG.song;
					var diff = CoolUtil.getDifficultyFilePath(curSelected);
					PlayState.SONG = Song.loadFromNewJson(name, name,diff.toLowerCase().substr(1, diff.length));
					PlayState.storyDifficulty = curSelected;
					trace(diff.toLowerCase().substr(1, diff.length));
					

					MusicBeatState.resetState();
					FlixG.sound.music.volume = 0;
					PlayState.changedDifficulty = true;
					PlayState.chartingMode = false;
					return;
				}

				menuItems = menuItemsOG;
				regenMenu();
			}

			switch (daSelected)
			{
				case "Resume":
					

					close();
					PlayState.instance.callAllHScript('onPauseConfirm', []);
				case 'Change Difficulty':
					menuItems = difficultyChoices;
					deleteSkipTimeText();
					regenMenu();
				case 'Toggle Practice Mode':
					PlayState.instance.practiceMode = !PlayState.instance.practiceMode;
					PlayState.changedDifficulty = true;
					practiceText.visible = PlayState.instance.practiceMode;
				case "Restart Song":
					restartSong();
					PlayState.instance.callAllHScript('onPauseRestart', []);
				case 'Change Options':
					
					
					FlixG.sound.playMusic(Paths.music(ClientPrefs.menuMusic));
					MusicBeatState.switchState(new OptionsState());
				case "Leave Charting Mode":
					restartSong();
					PlayState.chartingMode = false;
				case 'Skip Time':
					if(curTime < Conductor.songPosition)
					{
						PlayState.startOnTime = curTime;
						restartSong(true);
					}
					else
					{
						if (curTime != Conductor.songPosition)
						{
							PlayState.instance.clearNotesBefore(curTime);
							PlayState.instance.setSongTime(curTime);
						}
						if(tweenStuff != null) {
							tweenStuff.cancel();
							
						}
						close();
					}
				case "End Song":
					close();
					PlayState.instance.finishSong(true);
					

				case 'Toggle Botplay':
					PlayState.instance.botplay = !PlayState.instance.botplay;
					PlayState.changedDifficulty = true;
					botText.visible = PlayState.instance.botplay;
					PlayState.instance.botplaySine = 0;
				case "Exit to menu":
					PlayState.deathCounter = 0;
					PlayState.seenCutscene = false;

					WeekData.loadTheFirstEnabledMod();
					

					if(PlayState.isStoryMode) {
						OptionsState.isFromPlayState = false;
					MusicBeatState.switchState(new StoryMenuState());

					} else {
						OptionsState.isFromPlayState = false;
						MusicBeatState.switchState(new FreeplayState());
					}
					PlayState.cancelMusicFadeTween();
					FlixG.sound.playMusic(Paths.music(ClientPrefs.menuMusic));
					PlayState.isCorruptUI = false;
					PlayState.changedDifficulty = false;
					PlayState.chartingMode = false;
					PlayState.instance.callAllHScript('onPauseExit', []);
			}
		}
}
function deleteSkipTimeText()
	{
		if(skipTimeText != null)
		{
			skipTimeText.kill();
			remove(skipTimeText);
			skipTimeText.destroy();
		}
		skipTimeText = null;
		skipTimeTracker = null;
	}
function onDestroy()
{
	pauseMusic.destroy();
}
function regenMenu() {
    for (i in 0...grpMenuShit.members.length) {
        var obj = grpMenuShit.members[0];
        obj.kill();
        grpMenuShit.remove(obj, true);
        obj.destroy();
    }

    for (i in 0...menuItems.length) {
        var item = new Alphabet(0, 70 * i + 30, menuItems[i], true, false);
        item.isMenuItem = true;
        item.targetY = i;
        grpMenuShit.add(item);

        if(menuItems[i] == 'Skip Time')
        {
			var lmao = 'vcr.ttf';
			if (ClientPrefs.langType == 'Chinese')
				lmao = 'zpix.ttf';
            skipTimeText = new FlxText(0, 0, 0, '', 64);
            skipTimeText.setFormat(Paths.font(lmao), 64, OGcolor, 'center', FlxTextBorderStyle.OUTLINE, BlackColor);
            skipTimeText.scrollFactor.set();
            skipTimeText.borderSize = 2;
            skipTimeTracker = item;
            add(skipTimeText);

            updateSkipTextStuff();
            updateSkipTimeText();
        }
    }
    curSelected = 0;
    changeSelection(0);
}
function changeSelection(change)
{
	curSelected += change;

	if (curSelected < 0)
		curSelected = menuItems.length - 1;
	if (curSelected >= menuItems.length)
		curSelected = 0;

	var bullShit = 0;

	for (item in grpMenuShit.members)
	{
		item.targetY = bullShit - curSelected;
		bullShit++;

		item.alpha = 0.6;
		// item.setGraphicSize(Std.int(item.width * 0.8));

		if (item.targetY == 0)
		{
			item.alpha = 1;
			// item.setGraphicSize(Std.int(item.width));
			if(item == skipTimeTracker)
				{
					curTime = Math.max(0, Conductor.songPosition);
					updateSkipTimeText();
				}
		}
		
	}


}

function updateSkipTextStuff()
	{
		if(skipTimeText == null || skipTimeTracker == null) return;

		skipTimeText.x = skipTimeTracker.x + skipTimeTracker.width + 60;
		skipTimeText.y = skipTimeTracker.y;
		skipTimeText.visible = (skipTimeTracker.alpha >= 1);
	}

	function updateSkipTimeText()
	{
		skipTimeText.text = FlxStringUtil.formatTime(Math.max(0, Math.floor(curTime / 1000)), false) + ' / ' + FlxStringUtil.formatTime(Math.max(0, Math.floor(FlixG.sound.music.length / 1000)), false);
	}